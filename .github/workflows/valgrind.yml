name: Valgrind

on:
  workflow_dispatch:
    inputs:
      test-file:
        description: 'new_test/<test-file>'
        required: false
        default: ""
      use-server-rc:
        required: true
        default: false

jobs:
  valgrind:
    runs-on:
      group: client_team_runners
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: "3.7"
        architecture: 'x64'

    - name: Install client
      run: pip install .

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Run EE server
      uses: ./.github/actions/run-ee-server
      with:
        use-server-rc: ${{ inputs.use-server-rc }}

    - name: Wait for database to be ready
      # Should be ready after 3 seconds
      run: sleep 3

    - run: sudo apt update
    - run: sudo apt install valgrind -y
    - run: export "TEST_FILE_COUNT=$(ls -1 test_*.py | wc -l)" >> $GITHUB_ENV
      working-directory: test/new_tests/

    - run: export FIRST_HALF_TEST_NAMES=$(ls -1 test_*.py | head -n $((TEST_FILE_COUNT/2)) | find . -name "test_*.py" -printf "%f ") >> $GITHUB_ENV
      working-directory: test/new_tests/

    - run: export SECOND_HALF_TEST_NAMES=$(ls -1 test_*.py | head -n $((1-TEST_FILE_COUNT/2)) | find . -name "test_*.py" -printf "%f ") >> $GITHUB_ENV
      working-directory: test/new_tests/

    - run: PYTHONMALLOC=malloc valgrind --leak-check=full --error-exitcode=1 python3 -m pytest -v new_tests/${{ github.event.inputs.test-file }}
      if: ${{ inputs.test-file != '' }}
      working-directory: test

    - run: PYTHONMALLOC=malloc valgrind --leak-check=full --error-exitcode=1 python3 -m pytest -v new_tests/${{ env.FIRST_HALF_TEST_NAMES }} & 2>&1 > first_half.log
      if: ${{ inputs.test-file == '' }}
      working-directory: test

    - run: PYTHONMALLOC=malloc valgrind --leak-check=full --error-exitcode=1 python3 -m pytest -v new_tests/${{ env.SECOND_HALF_TEST_NAMES }} 
      if: ${{ inputs.test-file == '' }}
      working-directory: test

    - run: cat first_half.log
      working-directory: test
      if: ${{ always() }}

