name: Stage tests

# Downloads artifacts either from Github or JFrog
# and runs category 1 (source distribution) and category 2 (binary distribution) tests
# The purpose is to test that our artifacts work on the Linux distros / OS versions that the client supports
# and QE doesn't have enough disk space for more Linux distros, so we have some tests here in Github Actions

on:
  workflow_call:
    inputs:
      use_jfrog_builds:
        description: If false, download artifacts from Github
        required: true
        type: boolean
        default: true
      jfrog-build-version-to-test:
        description: Used only when use_jfrog_builds is true.
        type: string
        required: false
      # These will be set if use_jfrog_builds is false (i.e when someone is building the artifacts from scratch and stage testing them in a calling workflow)
      # If use_jfrog_builds is true, only the defaults will be used
      registry-name:
        type: string
        required: false
        description: Registry name
        default: 'docker.io'
      image-name:
        type: string
        required: false
        description: Image name
        default: 'aerospike/aerospike-server-enterprise'
      server-tag:
        type: string
        required: false
        default: 'latest'
        description: 'Server docker image tag'
      test-macos-x86:
        required: false
        type: boolean
        default: false
        description: 'Test macOS x86 wheels (unstable)'
      test-file:
        required: false
        type: string
        default: ''
        description: 'Allows you to choose specific test files to run.'

env:
  REGISTRY_USERNAME: ${{ inputs.registry-name == 'docker.io' && secrets.DOCKER_HUB_BOT_USERNAME || secrets.QE_DOCKER_REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ inputs.registry-name == 'docker.io' && secrets.DOCKER_HUB_BOT_PW || secrets.QE_DOCKER_REGISTRY_PASSWORD }}

jobs:
  linux-distro-tests:
    strategy:
      matrix:
        test-case: [
          # Docker image + tag, test category, Docker image platform (cpu arch), Python version
          ["amazonlinux:2023", 2, "linux/amd64", "3.9"],
          ["amazonlinux:2023", 2, "linux/arm64", "3.9"],
          ["amazonlinux:2023", 2, "linux/amd64", "3.11"],
          ["amazonlinux:2023", 2, "linux/arm64", "3.11"],
          ["ubuntu:22.04", 2, "linux/amd64", "3.10"],
          ["ubuntu:22.04", 2, "linux/arm64", "3.10"],
          ["ubuntu:24.04", 2, "linux/amd64", "3.12"],
          ["ubuntu:24.04", 2, "linux/arm64", "3.12"],
          # Bullseye is Debian 11
          ["python:3.9-bullseye", 2, "linux/amd64", "3.9"],
          ["python:3.9-bullseye", 2, "linux/arm64", "3.9"],
          ["python:3.10-bullseye", 2, "linux/amd64", "3.10"],
          ["python:3.10-bullseye", 2, "linux/arm64", "3.10"],
          ["python:3.11-bullseye", 2, "linux/amd64", "3.11"],
          ["python:3.11-bullseye", 2, "linux/arm64", "3.11"],
          ["python:3.12-bullseye", 2, "linux/amd64", "3.12"],
          ["python:3.12-bullseye", 2, "linux/arm64", "3.12"],
          ["python:3.13-bullseye", 2, "linux/amd64", "3.13"],
          ["python:3.13-bullseye", 2, "linux/arm64", "3.13"],
          ["python:3.14-rc-bullseye", 2, "linux/amd64", "3.14"],
          ["python:3.14-rc-bullseye", 2, "linux/arm64", "3.14"],
          # Bookworm is Debian 12
          ["python:3.9-bookworm", 2, "linux/amd64", "3.9"],
          ["python:3.9-bookworm", 2, "linux/arm64", "3.9"],
          ["python:3.10-bookworm", 2, "linux/amd64", "3.10"],
          ["python:3.10-bookworm", 2, "linux/arm64", "3.10"],
          ["python:3.11-bookworm", 2, "linux/amd64", "3.11"],
          ["python:3.11-bookworm", 2, "linux/arm64", "3.11"],
          ["python:3.12-bookworm", 2, "linux/amd64", "3.12"],
          ["python:3.12-bookworm", 2, "linux/arm64", "3.12"],
          ["python:3.13-bookworm", 2, "linux/amd64", "3.13"],
          ["python:3.13-bookworm", 2, "linux/arm64", "3.13"],
          ["python:3.14-rc-bookworm", 2, "linux/amd64", "3.14"],
          ["python:3.14-rc-bookworm", 2, "linux/arm64", "3.14"],
          # QE currently covers Debian 13 on all client-supported Python versions
          ["redhat/ubi8", 2, "linux/amd64", "3.11"],
          ["redhat/ubi8", 2, "linux/arm64", "3.11"],
          ["redhat/ubi9", 2, "linux/amd64", "3.9"],
          ["redhat/ubi9", 2, "linux/arm64", "3.9"],
          ["amazonlinux:2023", 1, "linux/amd64", "3.9"],
          ["redhat/ubi9", 1, "linux/amd64", "3.9"],
        ]
      fail-fast: false
    env:
      LINUX_DISTRO_CONTAINER_NAME: linux-distro
      PIP_INSTALL_COMMAND: 'pip install'
    runs-on: ${{ matrix.test-case[2] == 'linux/amd64' && 'ubuntu-22.04' || 'ubuntu-22.04-arm' }}
    steps:
    # TODO: the checkout code is also duplicated in the macOS stage tests
    # But it's only a few lines of code so I didn't bother to create a composite action for it.
    - name: Get tests and Github action scripts
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        ref: ${{ inputs.use_jfrog_builds && inputs.jfrog-build-version-to-test || github.sha }}
        sparse-checkout: |
          test
          .github

    # Map test case tuple entries to env vars to make code easier to read
    - run: echo "DISTRO_DOCKER_IMAGE_AND_TAG=${{ matrix.test-case[0] }}" >> $GITHUB_ENV
    - run: echo "TEST_CATEGORY=${{ matrix.test-case[1] }}" >> $GITHUB_ENV
    - run: echo "DISTRO_DOCKER_IMAGE_PLATFORM=${{ matrix.test-case[2] }}" >> $GITHUB_ENV
    - run: echo "PYTHON_VERSION=${{ matrix.test-case[3] }}" >> $GITHUB_ENV

    - uses: ./.github/actions/get-artifact-for-stage-tests
      with:
        get_from_jfrog: ${{ inputs.use_jfrog_builds }}
        # This input is only used if above input is true
        jfrog_build_version: ${{ inputs.jfrog-build-version-to-test }}
        dist_type_to_get: ${{ env.TEST_CATEGORY == '2' && 'wheel' || 'sdist' }}
        # wheel* inputs are used only if running category 2 tests
        wheel_python_version: ${{ env.PYTHON_VERSION }}
        wheel_os: manylinux
        wheel_cpu_arch: ${{ env.DISTRO_DOCKER_IMAGE_PLATFORM == 'linux/amd64' && 'x86_64' || 'aarch64' }}
        JFROG_PLATFORM_URL: ${{ secrets.JFROG_PLATFORM_URL }}
        JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
        JFROG_REPO_NAME: ${{ vars.JFROG_REPO_NAME }}

    - uses: ./.github/actions/run-ee-server
      with:
        registry-name: ${{ inputs.registry-name }}
        registry-username: ${{ env.REGISTRY_USERNAME }}
        registry-password: ${{ env.REGISTRY_PASSWORD }}
        image-name: ${{ inputs.image-name }}
        server-tag: ${{ inputs.server-tag }}
        where-is-client-connecting-from: 'separate-docker-container'

    - name: Run distro container
      # Run distro container on host network to access the Aerospike server using localhost (without having to change config.conf)
      run: docker run --detach --network host --platform ${{ env.DISTRO_DOCKER_IMAGE_PLATFORM }} --name ${{ env.LINUX_DISTRO_CONTAINER_NAME }} ${{ env.DISTRO_DOCKER_IMAGE_AND_TAG }} tail -f /dev/null

    - name: Copy repo (and artifact) to container
      run: docker cp . ${{ env.LINUX_DISTRO_CONTAINER_NAME }}:/aerospike-client-python

    - name: 'Amazon Linux 2023: install python 3.11 if applicable'
      if: ${{ env.DISTRO_DOCKER_IMAGE_AND_TAG == 'amazonlinux:2023' && env.PYTHON_VERSION == '3.11' }}
      run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} yum install -y python3.11

    - name: 'Ubuntu: Install python 3 that comes by default (step 1)'
      if: ${{ startsWith(env.DISTRO_DOCKER_IMAGE_AND_TAG, 'ubuntu') }}
      run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} apt update

    - name: 'Ubuntu: Install python 3 that comes by default (step 2)'
      if: ${{ startsWith(env.DISTRO_DOCKER_IMAGE_AND_TAG, 'ubuntu') }}
      run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} apt install python3 python3-pip -y

    - name: 'RHEL 9: Install python 3 that comes by default (step 2)'
      if: ${{ startsWith(env.DISTRO_DOCKER_IMAGE_AND_TAG, 'redhat/ubi8') }}
      run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} dnf install -y python311

    - name: Make sure pip is installed
      if: ${{ env.DISTRO_DOCKER_IMAGE_AND_TAG == 'amazonlinux:2023' || startsWith(env.DISTRO_DOCKER_IMAGE_AND_TAG, 'redhat/ubi') || startsWith(env.DISTRO_DOCKER_IMAGE_AND_TAG, 'python') }}
      run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ env.PYTHON_VERSION }} -m ensurepip

    - name: 'Cat 1: Install build dependencies using yum'
      if: ${{ env.TEST_CATEGORY == '1' }}
      run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} yum install -y libyaml-devel openssl-devel glibc-devel autoconf automake libtool zlib-devel openssl-devel python-devel

    - if: ${{ env.DISTRO_DOCKER_IMAGE_AND_TAG == 'ubuntu:24.04' }}
      run: echo PIP_INSTALL_COMMAND="$PIP_INSTALL_COMMAND --break-system-packages" >> $GITHUB_ENV

    - name: 'Cat 1: Install pip build frontend'
      if: ${{ env.TEST_CATEGORY == '1' }}
      run: docker exec --workdir /aerospike-client-python/ ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ env.PYTHON_VERSION }} -m ${{ env.PIP_INSTALL_COMMAND }} -r requirements.txt

    - name: Install sdist or wheel distribution
      run: docker exec --workdir /aerospike-client-python/ ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ env.PYTHON_VERSION }} -m ${{ env.PIP_INSTALL_COMMAND }} ${{ env.ARTIFACT_FILE_NAME_PATTERN }}

    - name: Install pytest
      run: docker exec --workdir /aerospike-client-python/test ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ env.PYTHON_VERSION }} -m ${{ env.PIP_INSTALL_COMMAND }} pytest -c requirements.txt

    - name: Run tests
      run: docker exec --workdir /aerospike-client-python/test ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ env.PYTHON_VERSION }} -m pytest new_tests/${{ inputs.test-file }}

  macOS:
    if: ${{ inputs.test-macos-x86 }}
    strategy:
      matrix:
        runner-os: [
          # These larger runners run on intel
          macos-14-large,
          macos-15-large
        ]
        python-version: [
          "3.9",
          "3.10",
          "3.11",
          "3.12",
          "3.13",
        ]
      fail-fast: false
    runs-on: ${{ matrix.runner-os }}
    steps:
    - name: Get tests and Github action scripts
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        ref: ${{ inputs.use_jfrog_builds && inputs.jfrog-build-version-to-test || github.sha }}
        sparse-checkout: |
          test
          .github

    - uses: ./.github/actions/get-artifact-for-stage-tests
      with:
        # See comments in linux stage tests for how this works
        get_from_jfrog: ${{ inputs.use_jfrog_builds }}
        jfrog_build_version: ${{ inputs.jfrog-build-version-to-test }}
        dist_type_to_get: 'wheel'
        wheel_python_version: ${{ matrix.python-version }}
        wheel_os: macosx
        wheel_cpu_arch: x86_64
        JFROG_PLATFORM_URL: ${{ secrets.JFROG_PLATFORM_URL }}
        JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
        JFROG_REPO_NAME: ${{ vars.JFROG_REPO_NAME }}

    - uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c # v2
      with:
        python-version: ${{ matrix.python-version }}

    - uses: ./.github/actions/setup-docker-on-macos

    - uses: ./.github/actions/run-ee-server
      with:
        registry-name: ${{ inputs.registry-name }}
        registry-username: ${{ env.REGISTRY_USERNAME }}
        registry-password: ${{ env.REGISTRY_PASSWORD }}
        image-name: ${{ inputs.image-name }}
        server-tag: ${{ inputs.server-tag }}
        where-is-client-connecting-from: 'docker-host'

    - name: Install wheel
      run: python3 -m pip install *.whl

    - name: Install test dependencies
      run: python3 -m pip install pytest -c requirements.txt
      working-directory: test

    - name: Run tests
      run: python3 -m pytest new_tests/
      id: test
      working-directory: test
