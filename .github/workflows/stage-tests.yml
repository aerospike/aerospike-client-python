name: Stage tests

# Downloads artifacts either from Github or JFrog
# and runs category 1 (source distribution) and category 2 (binary distribution) tests
# The purpose is to test that our artifacts work on the Linux distros / OS versions that the client supports
# and QE doesn't have enough disk space for more Linux distros, so we have some tests here in Github Actions

on:
  # For testing changes to this workflow only
  workflow_dispatch:
    inputs:
      jfrog-build-version-to-test:
        type: string
        required: true
      # For workflow_dispatch, this input should always be set to true.
      # Otherwise, the workflow will fail because it's downloading non-existent Github artifacts
      use_jfrog_builds:
        type: boolean
        required: false
        default: true
      # Usually we wouldn't need to set the below inputs for testing changes to this workflow
      # But these inputs are present throughout the workflow so we include them in workflow_dispatch to be safe
      use-server-rc:
        type: boolean
        required: false
        default: false
      server-tag:
        type: string
        required: false
        default: 'latest'
      test-macos-x86:
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      use_jfrog_builds:
        description: If false, download artifacts from Github
        required: true
        type: boolean
        default: true
      jfrog-build-version-to-test:
        description: Used only when use_jfrog_builds is true.
        type: string
        required: false
      # These will be set if use_jfrog_builds is false (i.e when someone is building the artifacts from scratch and stage testing them in a calling workflow)
      # If use_jfrog_builds is true, only the defaults will be used
      use-server-rc:
        type: boolean
        required: false
        default: false
        description: 'Test against server release candidate?'
      server-tag:
        type: string
        required: false
        default: 'latest'
        description: 'Server docker image tag'
      test-macos-x86:
        required: false
        type: boolean
        default: false
        description: 'Test macOS x86 wheels (unstable)'

jobs:
  stage-tests:
    strategy:
      matrix:
        test-case: [
          # Docker image + tag, test category, Docker image platform (cpu arch), Python version
          ["amazonlinux:2023", 2, "linux/amd64", "3.9"],
          ["amazonlinux:2023", 2, "linux/arm64", "3.9"],
          ["amazonlinux:2023", 2, "linux/amd64", "3.11"],
          ["amazonlinux:2023", 2, "linux/arm64", "3.11"],
          ["ubuntu:22.04", 2, "linux/amd64", "3.10"],
          ["ubuntu:22.04", 2, "linux/arm64", "3.10"],
          # Bookworm is Debian 12
          ["python:3.8-bookworm", 2, "linux/amd64", "3.8"],
          ["python:3.8-bookworm", 2, "linux/arm64", "3.8"],
          ["python:3.9-bookworm", 2, "linux/amd64", "3.9"],
          ["python:3.9-bookworm", 2, "linux/arm64", "3.9"],
          ["python:3.10-bookworm", 2, "linux/amd64", "3.10"],
          ["python:3.10-bookworm", 2, "linux/arm64", "3.10"],
          ["python:3.11-bookworm", 2, "linux/amd64", "3.11"],
          ["python:3.11-bookworm", 2, "linux/arm64", "3.11"],
          ["python:3.12-bookworm", 2, "linux/amd64", "3.12"],
          ["python:3.12-bookworm", 2, "linux/arm64", "3.12"],
          ["amazonlinux:2023", 1, "linux/amd64", "3.9"],
          ["redhat/ubi9", 1, "linux/amd64", "3.9"],
        ]
      fail-fast: false
    # We use a reusable workflow to assign each matrix tuple to inputs
    # This makes the linux distro test code more readable
    # Otherwise we would have to refer to each tuple entry using indices
    uses: ./.github/workflows/linux-distro-test.yml
    with:
      # Test definition
      linux-distro-docker-image-and-tag: ${{ matrix.test-case[0] }}
      test-category: ${{ matrix.test-case[1] }}
      linux-distro-cpu-platform: ${{ matrix.test-case[2] }}
      python-version: ${{ matrix.test-case[3] }}
      # JFrog settings
      use_jfrog_builds: ${{ inputs.use_jfrog_builds }}
      jfrog-build-version: ${{ inputs.jfrog-build-version-to-test }}
      # Testing inputs
      use-server-rc: ${{ inputs.use-server-rc }}
      server-tag: ${{ inputs.server-tag }}

  macOS:
    if: ${{ inputs.test-macos-x86 }}
    strategy:
      matrix:
        runner-os: [
          macos-13,
          macos-14-large
        ]
        python-version: [
          "3.8",
          "3.9",
          "3.10",
          "3.11",
          "3.12",
        ]
      fail-fast: false
    runs-on: ${{ matrix.runner-os }}
    steps:
    - uses: ./.github/actions/get-artifacts-for-stage-tests
      with:
        get_from_jfrog: ${{ inputs.use_jfrog_builds }}
        # Only used if above input is true
        jfrog_build_version: ${{ inputs.jfrog-build-version-to-test }}
        dist_type_to_get: 'wheel'
        wheel_python_version: ${{ matrix.python-version }}
        wheel_os: macosx
        wheel_cpu_arch: x86_64
        JFROG_PLATFORM_URL: ${{ secrets.JFROG_PLATFORM_URL }}
        JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
        JFROG_REPO_NAME: ${{ vars.JFROG_REPO_NAME }}

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Docker Engine
      run: brew install colima

    - name: Install Docker client
      run: brew install docker

    - name: Start Docker Engine
      run: colima start

    - uses: ./.github/actions/run-ee-server
      with:
        use-server-rc: ${{ inputs.use-server-rc }}
        server-tag: ${{ inputs.server-tag }}
        docker-hub-username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        docker-hub-password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    - name: Wait for server to be ready
      run: sleep 5

    - name: Install wheel
      run: python3 -m pip install *.whl

    - name: Install test dependencies
      run: python3 -m pip install pytest -c requirements.txt
      working-directory: test

    - name: Run tests
      run: python3 -m pytest new_tests/
      id: test
      working-directory: test
