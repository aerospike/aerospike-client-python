name: Pytest Tests

# Trigger test workflow whenever:
# 1. A pull request is updated (e.g with new commits)
# 2. Commits are pushed directly to the stage or master branch
on:
  push:
    branches: ["stage", "master"]
  pull_request:
    branches: ["stage"]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install linting dependencies
      run: python -m pip install flake8
    - name: Lint Python code
      # Ignore E203 to be compatible with black
      run: flake8 --max-line-length=120 --count --extend-ignore=E203 aerospike_helpers/ test/
    - name: Lint C wrapper code
      uses: jidicula/clang-format-action@v4.9.0
      with:
        check-path: 'src'
        clang-format-version: 14

  build-and-install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'

    - run: sudo apt update
    - name: Install build dependencies (apt packages)
      run: sudo apt install python3-dev libssl-dev -y
    - name: Install build dependencies (pip packages)
      run: python3 -m pip install build

    - name: Build client
      run: python3 -m build

    - name: Check installing the client
      run: pip install .

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        # Build distributions location
        path: dist/

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install dependencies for building docs
      # TODO: find way to split up dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Build docs
      run: |
        cd doc/
        sphinx-build -b html . htmldir/

  spellcheck-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install dependencies for checking spelling in docs
      # TODO: find way to split up dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: |
        cd doc/
        sphinx-build -b spelling . spelling -W --keep-going

  # tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: Set up Aerospike Database
  #     uses: reugn/github-action-aerospike@dev
  #     with:
  #       port: 3000
  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.9'
  #       architecture: 'x64'
  #   - name: Build documentation
  #     run: |
  #       cd doc/
  #       sphinx-build -b spelling . spelling -W --keep-going
  #       sphinx-build -b html . htmldir -W
  #   - name: Run tests
  #     run: |
  #       cd test
  #       python -m pytest ./new_tests
