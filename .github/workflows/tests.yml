name: PR pre-merge tests

# Trigger test workflow whenever:
# 1. A pull request is updated (e.g with new commits)
# 2. Commits are pushed directly to the stage or master branch
on:
  push:
    branches: ["stage", "master"]
  pull_request:
    branches: ["stage"]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install linting dependencies
      run: python -m pip install flake8
    - name: Lint Python code
      run: python -m flake8
    - name: Lint C wrapper code
      uses: jidicula/clang-format-action@v4.9.0
      with:
        check-path: 'src'
        clang-format-version: 14

  build-install-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version: [
          3.7,
          # 3.8,
          # 3.9
        ]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    # - run: sudo apt update
    # - name: Install build dependencies (apt packages)
    #   run: sudo apt install python3-dev libssl-dev -y
    # - name: Install build dependencies (pip packages)
    #   run: python3 -m pip install build

    # - name: Build client
    #   run: python3 -m build

    - name: Install client
      run: pip install aerospike

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Install crudini to manipulate config.conf
      run: pip install crudini

    - name: Add enterprise edition config to config.conf
      run: |
        crudini --set config.conf enterprise-edition hosts 127.0.0.1:3000
        crudini --set config.conf enterprise-edition user superuser
        crudini --set config.conf enterprise-edition password superuser
      working-directory: test

    # - name: Add features.conf location to aerospike.conf
    #   # Add feature-key-file path to first occurrence of service stanza
    #   run: sed -i "0,/service {/s//service {\n\tfeature-key-file \/etc\/aerospike\/features.conf/" ./aerospike.conf
    #   working-directory: /opt/aerospike/etc/

    # - name: Get features.conf to enable enterprise edition tests
    #   env:
    #     FEATURES_CONF: ${{ secrets.FEATURES_CONF }}
    #   run: |
    #     echo -e "$FEATURES_CONF" > /opt/aerospike/etc/features.conf

    - name: Install enterprise edition server
      # run: docker run -d -v /opt/aerospike/etc/:/opt/aerospike/etc/ --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server-enterprise --config-file=/opt/aerospike/etc/aerospike.conf
      run: |
        wget -O aerospike.tgz https://download.aerospike.com/artifacts/aerospike-server-enterprise/6.2.0/aerospike-server-enterprise_6.2.0.2_tools-8.0.3_ubuntu20.04_x86_64.tgz
        tar -xvf aerospike.tgz
        cd aerospike-server-enterprise_*
        sudo ./asinstall

    - name: Enable security features using aerospike.conf
      # Security stanza
      run: echo -e "\n\nsecurity{\n\n}\n" | sudo tee -a /etc/aerospike/aerospike.conf

    - name: Start server
      run: sudo systemctl start aerospike

    - name: Wait for the database to start
      run: |
        wget https://raw.githubusercontent.com/eficode/wait-for/$WAIT_FOR_VERSION/wait-for
        chmod u+x ./wait-for
        ./wait-for 127.0.0.1:3000
        # ./wait-for 127.0.0.1:3001
        # ./wait-for 127.0.0.1:3002
      env:
        WAIT_FOR_VERSION: 4df3f9262d84cab0039c07bf861045fbb3c20ab7 # v2.2.3

    - name: Create user in database for tests
      run: asadm --enable -e "manage acl create user superuser password superuser roles read-write-udf sys-admin user-admin data-admin"

    - name: Run tests
      run: python -m pytest ./new_tests
      working-directory: test

  spellcheck-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install dependencies for checking spelling in docs
      # TODO: find way to split up dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: sphinx-build -b spelling . spelling -W --keep-going
      working-directory: doc
