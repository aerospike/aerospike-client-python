name: Pytest Tests

# Trigger test workflow whenever:
# 1. A pull request is updated (e.g with new commits)
# 2. Commits are pushed directly to the stage or master branch
on:
  push:
    branches: ["stage", "master"]
  pull_request:
    branches: ["stage"]
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Aerospike Database
      uses: reugn/github-action-aerospike@dev
      with:
        port: 3000
        # config-file: 'test/test-instance-data/aerospike.conf'
        # feature-key-file: 'test/test-instance-data/features.conf'
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Print Python debug info
      run: python --version
    - name: Setup test config file
      run: |
        sudo apt-get install jq
        cd test
        CID=$(docker ps -a | grep 'aerospike-server' | awk 'NF>1{print $NF}')
        echo $CID
        CIP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CID)
        echo $CIP
        python - <<EOF
        import configparser
        config = configparser.ConfigParser(delimiters=(":"))
        config["enterprise-edition"] = {"hosts": "", "user": "", "password": ""}
        config["community-edition"] = {"hosts": "$CIP" + ":3000"}
        with open("config.conf", "w") as conf:
            config.write(conf)
        EOF
        cat ./config.conf
        cd ..
    - name: Print Docker debug info
      run: |
        docker inspect gha_aerospike
        docker ps
        docker ps -a
        docker logs --tail all gha_aerospike
    - name: Install dependencies
      run: |
        sudo apt-get install libssl-dev
        sudo apt-get install python3-dev
        python -m pip install pytest flake8 sphinx sphinxcontrib-spelling
    - name: Lint aerospike_helpers
      run: |
        # Ignore E203 to be compatible with black
        flake8 --max-line-length=120 --count --extend-ignore=E203 aerospike_helpers/
    - name: Build documentation
      run: |
        cd doc/
        sphinx-build -b spelling . spelling -W --keep-going
        sphinx-build -b html . htmldir -W
    - name: Build client
      run: |
        python setup.py build --force
    - name: Install client
      run: |
        python setup.py install --force
    - name: Run tests 
      run: |
        cd test
        python -m pytest ./new_tests
