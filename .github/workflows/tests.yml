name: PR tests

permissions:
  contents: read

env:
  LOWEST_SUPPORTED_PY_VERSION: '3.9'
  # pull_request event doesn't support inputs
  REGISTRY_NAME: ${{ github.event_name == 'pull_request' && 'docker.io' || inputs.registry-name }}
  SERVER_TAG: ${{ github.event_name == 'pull_request' && 'latest' || inputs.server-tag }}
  REGISTRY_USERNAME: ${{ github.event_name == 'pull_request' && secrets.DOCKER_HUB_BOT_USERNAME || secrets.QE_DOCKER_REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ github.event_name == 'pull_request' && secrets.DOCKER_HUB_BOT_PW || secrets.QE_DOCKER_REGISTRY_PASSWORD }}

# Trigger test workflow whenever:
# 1. A pull request is updated (e.g with new commits)
# 2. Commits are pushed directly to the dev, stage or master branch
on:
  push:
    branches: ["dev*", "stage*", "master*", "v*-backport*"]
  pull_request:
    branches: ["dev*", "stage*", "v*-backport*"]
    types: [
      # Default triggers
      opened,
      synchronize,
      reopened,
      # Additional triggers
      labeled,
      unlabeled
    ]
  workflow_dispatch:
    inputs:
      # Used to test server RCs
      registry-name:
        description: Registry name
        type: string
        default: docker.io
        required: true
      server-tag:
        description: Server tag
        type: string
        default: latest
        required: true

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'
    - uses: pre-commit/action@v3.0.0

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        py-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        # Make sure we can build and run tests on an instrumented build that uses libasan
        # We aren't necessarily checking for memory errors / leaks in this test
        sanitizer: [false]
        include:
        - py-version: 3.9
          sanitizer: true
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    - run: sudo apt update
    - name: Install build dependencies (apt packages)
      run: sudo apt install python3-dev libssl-dev -y
    - name: Install build dependencies (pip packages)
      run: python3 -m pip install -r requirements.txt

    - if: ${{ matrix.sanitizer }}
      run: echo SANITIZER=1 >> $GITHUB_ENV

    - name: Build client
      run: python3 -m build
      env:
        CFLAGS: '-Werror'

    - run: echo WHEEL_GH_ARTIFACT_NAME=wheel-${{ matrix.py-version }} >> $GITHUB_ENV

    - if: ${{ matrix.sanitizer }}
      run: echo WHEEL_GH_ARTIFACT_NAME=${{ env.WHEEL_GH_ARTIFACT_NAME }}-sanitizer >> $GITHUB_ENV

    - name: Send wheel to test jobs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.WHEEL_GH_ARTIFACT_NAME }}
        path: ./dist/*.whl

  generate-coverage-report:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'

    - name: Build client
      # Use old build command to generate object .o files in build/temp*/src/main directory
      # They will also contain .gcno files there
      # and .gcda files will be generated there after running the tests
      # The build frontend doesn't generate these .o files (may be wrong?)
      run: COVERAGE=1 python3 setup.py build

    - name: Install client
      # Install in user directory to prevent permission errors
      run: python3 setup.py install --user

    - run: pip install -r requirements.txt
      working-directory: test

    - name: Run Aerospike server
      uses: ./.github/actions/run-ee-server
      with:
        registry-name: ${{ env.REGISTRY_NAME }}
        server-tag: ${{ env.SERVER_TAG }}
        registry-username: ${{ env.REGISTRY_USERNAME }}
        registry-password: ${{ env.REGISTRY_PASSWORD }}

    - run: python3 -m pytest --cov=aerospike_helpers --cov-report xml:coverage.xml ./new_tests
      working-directory: test

    - name: Copy over source files to build dir
      if: ${{ !cancelled() }}
      # The build/temp*/src/main directory will contain a hierarchy of object .o files
      # But the source files must be stored in the same folder hierarchy at build/temp*/src/main/src/main
      run: |
        cd build/temp*/src/main
        mkdir -p src/main/
        mkdir -p cdt_types/src/main/cdt_types
        mkdir -p client/src/main/client
        mkdir -p geospatial/src/main/geospatial
        mkdir -p global_hosts/src/main/global_hosts
        mkdir -p key_ordered_dict/src/main/key_ordered_dict
        mkdir -p nullobject/src/main/nullobject
        mkdir -p query/src/main/query
        mkdir -p scan/src/main/scan
        mkdir -p transaction/src/main/transaction
        mkdir -p config_provider/src/main/config_provider

        cd ../../../../
        cp src/main/*.c build/temp*/src/main/src/main
        cp src/main/cdt_types/*.c build/temp*/src/main/cdt_types/src/main/cdt_types/
        cp src/main/client/*.c build/temp*/src/main/client/src/main/client/
        cp src/main/geospatial/*.c build/temp*/src/main/geospatial/src/main/geospatial/
        cp src/main/global_hosts/*.c build/temp*/src/main/global_hosts/src/main/global_hosts/
        cp src/main/key_ordered_dict/*.c build/temp*/src/main/key_ordered_dict/src/main/key_ordered_dict/
        cp src/main/nullobject/*.c build/temp*/src/main/nullobject/src/main/nullobject/
        cp src/main/query/*.c build/temp*/src/main/query/src/main/query/
        cp src/main/scan/*.c build/temp*/src/main/scan/src/main/scan/
        cp src/main/transaction/*.c build/temp*/src/main/transaction/src/main/transaction/
        cp src/main/config_provider/*.c build/temp*/src/main/config_provider/src/main/config_provider/

    - name: Generate coverage report for all object files
      if: ${{ !cancelled() }}
      run: |
        cd build/temp*/src/main
        find . -type f -name "*.o" -execdir gcov {} \;

    - name: Move aerospike_helpers coverage report to this directory
      if: ${{ !cancelled() }}
      run: mv test/coverage.xml build/temp*/src/main

    - name: Upload coverage report folder to Github
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: build/temp*/src/main/

  coverage-upload:
    needs: generate-coverage-report
    if: ${{ !cancelled() }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-report

    - uses: codecov/codecov-action@v5
      with:
        flags: ${{ env.REGISTRY_NAME }},${{ env.SERVER_TAG }}
        directory: coverage-report
        verbose: true # optional (default = false)
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  stubtest:
    needs: build
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'

    - uses: actions/download-artifact@v4
      with:
        name: wheel-${{ env.LOWEST_SUPPORTED_PY_VERSION }}

    - name: Install client
      run: pip install *.whl

    - run: pip install mypy

    - run: stubtest aerospike --allowlist stubtest-allowlist

  test-sanitizer:
    runs-on: ubuntu-22.04
    needs: build
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'

    - run: echo WHEEL_GH_ARTIFACT_NAME=wheel-${{ env.LOWEST_SUPPORTED_PY_VERSION }}-sanitizer >> $GITHUB_ENV

    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.WHEEL_GH_ARTIFACT_NAME }}

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    # We can already detect leaks using valgrind
    # halt_on_error must be enabled, or else this job won't fail if a memory error occurs
    - run: |
        echo ASAN_OPTIONS='detect_stack_use_after_return=1:detect_leaks=0' >> $GITHUB_ENV
        echo LD_PRELOAD=$(gcc --print-file-name=libasan.so) >> $GITHUB_ENV

    - uses: ./.github/actions/run-ee-server
      with:
        registry-name: ${{ env.REGISTRY_NAME }}
        server-tag: ${{ env.SERVER_TAG }}
        registry-username: ${{ env.REGISTRY_USERNAME }}
        registry-password: ${{ env.REGISTRY_PASSWORD }}

    - name: Run tests
      # We need to disable capturing output or else we cannot see memory errors reported by 
      # libasan during the test run
      run: python -m pytest ./new_tests -vvs
      working-directory: test

  test-ce:
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        py-version: [
          "3.9",
          "3.10",
          "3.11",
          "3.12",
          "3.13"
        ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    - run: echo WHEEL_GH_ARTIFACT_NAME=wheel-${{ matrix.py-version }} >> $GITHUB_ENV

    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.WHEEL_GH_ARTIFACT_NAME }}

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Run Aerospike server
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 -e DEFAULT_TTL=2592000 ${{ env.REGISTRY_NAME }}/aerospike/aerospike-server:${{ env.SERVER_TAG }}

    - name: Create config.conf
      run: cp config.conf.template config.conf
      working-directory: test

    - uses: ./.github/actions/wait-for-ce-server-to-start
      with:
        container-name: aerospike

    - name: Run tests
      run: python -m pytest ./new_tests -vv -W error::pytest.PytestUnraisableExceptionWarning
      working-directory: test

  test-lowest-supported-server:
    runs-on: ubuntu-22.04
    needs: build
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'

    - uses: actions/download-artifact@v4
      with:
        name: wheel-${{ env.LOWEST_SUPPORTED_PY_VERSION }}

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Run lowest supported server
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 -e DEFAULT_TTL=2592000 aerospike/aerospike-server:${{ vars.LOWEST_SUPPORTED_SERVER_VERSION }}

    - name: Create config.conf
      run: cp config.conf.template config.conf
      working-directory: test

    - uses: ./.github/actions/wait-for-ce-server-to-start
      with:
        container-name: aerospike

    - name: Run tests
      run: python -m pytest ./new_tests
      working-directory: test

  test-ee:
    runs-on: ubuntu-22.04
    needs: build
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: "3.13"
        architecture: 'x64'

    - uses: actions/download-artifact@v4
      with:
        name: wheel-3.13

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - uses: ./.github/actions/run-ee-server
      with:
        registry-name: ${{ env.REGISTRY_NAME }}
        server-tag: ${{ env.SERVER_TAG }}
        registry-username: ${{ env.REGISTRY_USERNAME }}
        registry-password: ${{ env.REGISTRY_PASSWORD }}

    - name: Run tests
      run: python -m pytest ./new_tests/test_{mrt_functionality,admin_*,compress}.py -W error::pytest.PytestUnraisableExceptionWarning
      working-directory: test

    - name: Show logs if failed
      if: ${{ failure() }}
      run: |
        docker container logs aerospike
        cat ./configs/aerospike.conf

  spellcheck-docs:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'
    - name: Install dependencies for checking spelling in docs
      # TODO: find way to split up dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: sphinx-build -b spelling . spelling -W --keep-going
      working-directory: doc

  check-links-docs:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'
    - name: Install documentation dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: sphinx-build -b linkcheck . links
      working-directory: doc

  test-metrics:
    needs: build
    strategy:
      matrix:
        suffix:
        - node_close_listener
        - cluster_name
      fail-fast: false
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.LOWEST_SUPPORTED_PY_VERSION }}
        architecture: 'x64'
    - uses: actions/download-artifact@v4
      with:
        name: wheel-${{ env.LOWEST_SUPPORTED_PY_VERSION }}
    - run: python3 -m pip install *.whl
    - run: python3 -m pip install -r requirements.txt
      working-directory: test/metrics
    - run: python3 test_${{ matrix.suffix }}.py
      working-directory: test/metrics

  foo:
    runs-on: ubuntu-24.04
    steps:
    - name: Get test-enqueue
      uses: actions/checkout@v4
      with:
        repository: citrusleaf/qe-tools
        token: ${{ secrets.CLIENT_BOT_PAT }}
        path: qe-tools
        sparse-checkout: |
          bin/test-enqueue
        sparse-checkout-cone-mode: false

    - name: Add test-enqueue to PATH
      run: echo "$(realpath qe-tools/bin)" >> $GITHUB_PATH

    - uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ secrets.JFROG_PLATFORM_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

    - run: jf rt download qe-go-dev-local/testctl.amd64.linux qe-tools/bin/testctl
    - run: chmod u+x ./testctl
      working-directory: qe-tools/bin
    - uses: actions/checkout@v4
      with:
        path: aerospike-client-python
        sparse-checkout: |
          test/client_perf.yaml
        sparse-checkout-cone-mode: false

    - name: Add AWS credentials
      run: |
        mkdir -p ~/.aws
        sections=("default" "qe")
        for section in ${sections[@]};
        do
          echo "[$section]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.QE_TEST_ENQUEUE_AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.QE_TEST_ENQUEUE_AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "region = us-west-1" >> ~/.aws/credentials
        done
      shell: bash

    - run: testctl --version

    # - run: testctl --config staging run 901b1178-0159-452d-9b36-64d455e568f2 --deployment perf_client
    #   working-directory: aerospike-client-python/test/

    - name: Allows us to get the exact test run id that was created by test-enqueue.
      run: echo TESTCTL_USER=$(uuidgen) >> $GITHUB_ENV

    - run: test-enqueue --config staging --deployment perf_client client_perf.yaml
      working-directory: aerospike-client-python/test/

    - name: Wait for test run to finish
      id: poll-run-id
      run: |
        while true; do
          # Color messes up the run_id's string
          # Use xargs to trim whitespace from testctl's output
          run_id=$(testctl --config staging ps --no-color --user ${{ env.TESTCTL_USER }} -n 1 -status completed --columns RUN_ID | sed '1d' | xargs)
          if [[ -z "$run_id" ]]; then
            echo "Test run has not finished yet..."
            sleep 2
          else
            echo "Test run $run_id has finished."
            break
          fi
        done
        echo "run_id=$run_id" >> "$GITHUB_OUTPUT"

    # We don't want to save the test results to the full run id
    # Just use the shortened id so it's easier to CD into the directory below
    # Need to skip downloading builds since we don't have VPN access (TODO check)
    - run: testctl --config staging download --skip-build-download ${{ steps.poll-run-id.outputs.run_id }}

    - run: cat ${{ steps.poll-run-id.outputs.run_id }}*/test_stdout
