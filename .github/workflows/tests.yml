name: PR pre-merge tests

# Trigger test workflow whenever:
# 1. A pull request is updated (e.g with new commits)
# 2. Commits are pushed directly to the stage or master branch
on:
  push:
    branches: ["stage", "master"]
  pull_request:
    branches: ["stage"]
    types: [
      # Default triggers
      opened,
      synchronize,
      reopened,
      # Additional triggers
      labeled,
      unlabeled
    ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - uses: pre-commit/action@v3.0.0

  alpine:
    runs-on: ubuntu-latest
    steps:
    - name: Run Aerospike server release candidate with latest tag
      if: ${{ contains(github.event.pull_request.labels.*.name, 'new-server-features') }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike.jfrog.io/docker/aerospike/aerospike-server-rc:latest

    - name: Run Aerospike server
      if: ${{ !contains(github.event.pull_request.labels.*.name, 'new-server-features') }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Get server ip
      run: echo SERVER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' aerospike) >> $GITHUB_ENV

    # Use this to get current branch of workflow
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v4
      with:
        short-length: 8 # Same as v3 and before

    - uses: addnab/docker-run-action@v3
      with:
        image: alpine:latest
        options: -e GITHUB_REF_NAME=${{ env.GITHUB_REF_NAME }} -e SERVER_IP=${{ env.SERVER_IP }}
        run: |
          apk add py3-pip
          apk add python3-dev
          apk add zlib-dev
          apk add git
          # C client dependencies
          apk add automake
          apk add make
          apk add musl-dev
          apk add gcc
          apk add openssl-dev
          apk add lua-dev
          apk add libuv-dev  # (for node.js)
          apk add doxygen  # (for make docs)
          apk add graphviz # (for make docs)

          git clone --recurse-submodules https://github.com/aerospike/aerospike-client-python
          cd aerospike-client-python/
          git checkout $GITHUB_REF_NAME
          git submodule update --recursive

          python3 -m pip install build
          python3 -m build
          python3 -m pip install dist/*.whl
          cd test/
          # requirements.txt is not working atm
          python3 -m pip install pytest

          # Configure tests
          sed -i "s/hosts: 127.0.0.1:3000/hosts: $SERVER_IP:3000/" config.conf

          python3 -m pytest new_tests/

    - name: Cleanup
      run: |
        docker container stop aerospike
        docker container rm aerospike

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    - run: sudo apt update
    - name: Install build dependencies (apt packages)
      run: sudo apt install python3-dev libssl-dev -y
    - name: Install build dependencies (pip packages)
      run: python3 -m pip install build

    - name: Build client
      run: python3 -m build

    - name: Send wheel to test jobs
      uses: actions/upload-artifact@v3
      with:
        name: wheel-${{ matrix.py-version }}
        path: ./dist/*.whl

  test-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: "3.9"
        architecture: 'x64'

    - name: Build client
      # Use old build command to generate object .o files in build/temp*/src/main directory
      # They will also contain .gcno files there
      # and .gcda files will be generated there after running the tests
      # The build frontend doesn't generate these .o files (may be wrong?)
      run: COVERAGE=1 python3 setup.py build

    - name: Install client
      # Install in user directory to prevent permission errors
      run: python3 setup.py install --user

    - run: pip install -r requirements.txt
      working-directory: test

    - name: Run Aerospike server
      uses: ./.github/actions/run-ee-server
      with:
        use-server-rc: ${{ contains(github.event.pull_request.labels.*.name, 'new-server-features') }}

    - run: sleep 5

    - run: python3 -m pytest new_tests/
      working-directory: test

    - name: Copy over source files to build dir
      if: ${{ always() }}
      # The build/temp*/src/main directory will contain a hierarchy of object .o files
      # But the source files must be stored in the same folder hierarchy at build/temp*/src/main/src/main
      run: |
        cd build/temp*/src/main
        mkdir src
        cd ../../../../
        cp src/ build/temp*/src/main/ -r

    - name: Generate coverage report for all object files
      if: ${{ always() }}
      run: |
        cd build/temp*/src/main
        find . -type f -name "*.o" -exec gcov {} \;

    - name: Get exact folder to find coverage reports
      if: ${{ always() }}
      # Can't pass in glob pattern to codecov action (I think?)
      run: |
        obj_dir=$(ls -d build/temp*/src/main/)
        echo "OBJ_DIR=$obj_dir" >> $GITHUB_ENV

    - uses: codecov/codecov-action@v3
      if: ${{ always() }}
      with:
        directory: ${{ env.OBJ_DIR }}
        verbose: true # optional (default = false)
        fail_ci_if_error: true

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3

  # Run this when testing new server features on server release candidate
  # to make sure the tests don't regress on the last server release.
  test-ce-latest-release:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'new-server-features') }}
    needs: build
    strategy:
      matrix:
        py-version: [
          "3.7",
        ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    - uses: actions/download-artifact@v3
      with:
        name: wheel-${{ matrix.py-version }}

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Run Aerospike server
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Wait for database to be ready
      # Should be ready after 3 seconds
      run: sleep 3

    - name: Run tests
      run: python -m pytest ./new_tests
      working-directory: test

  test-ce:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        py-version: [
          "3.7",
          "3.8",
          "3.9",
          "3.10",
          "3.11"
        ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    - uses: actions/download-artifact@v3
      with:
        name: wheel-${{ matrix.py-version }}

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Run Aerospike server release candidate with latest tag
      if: ${{ contains(github.event.pull_request.labels.*.name, 'new-server-features') }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike.jfrog.io/docker/aerospike/aerospike-server-rc:latest

    - name: Run Aerospike server
      if: ${{ !contains(github.event.pull_request.labels.*.name, 'new-server-features') }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Wait for database to be ready
      # Should be ready after 3 seconds
      run: sleep 3

    - name: Run tests
      run: python -m pytest ./new_tests
      working-directory: test

  test-ee:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: 'x64'

    - uses: actions/download-artifact@v3
      with:
        name: wheel-3.7

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - uses: ./.github/actions/run-ee-server
      with:
        use-server-rc: ${{ contains(github.event.pull_request.labels.*.name, 'new-server-features') }}

    - name: Wait for server to start
      run: sleep 5

    - name: Run tests
      run: python -m pytest ./new_tests/test_admin_*.py
      working-directory: test

    - name: Show logs if failed
      if: ${{ failure() }}
      run: |
        docker container logs aerospike
        cat ./configs/aerospike.conf

  spellcheck-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install dependencies for checking spelling in docs
      # TODO: find way to split up dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: sphinx-build -b spelling . spelling -W --keep-going
      working-directory: doc

  check-links-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install documentation dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: sphinx-build -b linkcheck . links
      working-directory: doc
