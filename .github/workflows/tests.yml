name: PR pre-merge tests

# Trigger test workflow whenever:
# 1. A pull request is updated (e.g with new commits)
# 2. Commits are pushed directly to the stage or master branch
on:
  push:
    branches: ["stage", "master"]
  pull_request:
    branches: ["stage"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - uses: pre-commit/action@v3.0.0

  get-server-rc:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') }}
    steps:
    # Store sensitive data in openvpn config template
    - name: Install OpenVPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved

    - uses: actions/checkout@v2

    - name: Fill in openvpn config file
      uses: bluwy/substitute-string-action@v1
      id: sub
      with:
        _input-file: ".github/workflows/aerospike_vpn_nosplit.ovpn"
        _format-key: '%%key%%'
        CA_CERT: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_CA }}
        STATIC_KEY: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_STATIC_KEY }}
        _output-file: ".github/workflows/aerospike_vpn_nosplit.ovpn"

    - name: Connect to Aerospike VPN
      uses: "kota65535/github-openvpn-connect-action@v2"
      with:
        config_file: ".github/workflows/aerospike_vpn_nosplit.ovpn"
        username: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_USERNAME }}
        password: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_PASSWORD }}

    - name: Get latest server release candidate
      run: |
        BUILDCTL_URL="build.browser.qe.aerospike.com/citrusleaf/qe.go/3.3.0-52-gd66bd4b/build/1.17/default/artifacts/buildctl.linux"
        curl -O --connect-timeout 60 $BUILDCTL_URL
        chmod 700 ./buildctl.linux

        BUILD_ID=$(./buildctl.linux rev --repo citrusleaf/aerospike-server --ref master | sed -n 2p | awk '{print $3}')
        ARTIFACTS_URL="build.browser.qe.aerospike.com/citrusleaf/aerospike-server/$BUILD_ID/build/x86-ubuntu-22.04/community/artifacts"

        # Download the .deb artifact
        wget --timeout=60 -r --no-parent --accept "*.deb" --no-directories $ARTIFACTS_URL

    - name: Disconnect from vpn
      run: sudo killall openvpn

    - name: Upload server release candidate to Github
      uses: actions/upload-artifact@v3
      with:
        name: server-rc
        path: ./*.deb

  alpine:
    runs-on: ubuntu-latest
    needs: [get-server-rc]
    if: ${{ always() && (needs.get-server-rc.result == 'success' || needs.get-server-rc.result == 'skipped') }}
    steps:
    - uses: actions/checkout@v2

    - name: Get server release candidate
      if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') }}
      uses: actions/download-artifact@v3
      with:
        name: server-rc

    - name: "Check file existence"
      uses: andstor/file-existence-action@v2
      id: check_files
      with:
        files: "*.deb"

    - uses: ./.github/actions/install-server-rc
      if: steps.check_files.outputs.files_exists == 'true'

    - name: Use Docker Hub RC
      if: ${{ contains(github.event.pull_request.labels.*.name, 'docker-hub-rc') }}
      uses: ./.github/actions/setup-docker-hub-rc
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up release server
      if: |
        !contains(github.event.pull_request.labels.*.name, 'qe-rc') &&
        !contains(github.event.pull_request.labels.*.name, 'docker-hub-rc')
      uses: reugn/github-action-aerospike@dev
      with:
        port: 3000

    # Use this to get current branch of workflow
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v4
      with:
        short-length: 8 # Same as v3 and before

    - name: Start Alpine container
      # Run in host network so it can connect to host's localhost server
      run: docker run --name alpine --network host --detach alpine:latest tail -f /dev/null

    - name: Copy build and test script to container
      run: docker cp ./build-alpine.sh alpine:/
      working-directory: .github/workflows

    - name: Build and test
      run: docker exec alpine ./build-alpine.sh ${{ env.GITHUB_REF_NAME }}

    - name: Cleanup
      run: |
        docker container stop alpine
        docker container prune -f

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    - run: sudo apt update
    - name: Install build dependencies (apt packages)
      run: sudo apt install python3-dev libssl-dev -y
    - name: Install build dependencies (pip packages)
      run: python3 -m pip install build

    - name: Build client
      run: python3 -m build

    - name: Send wheel to test jobs
      uses: actions/upload-artifact@v3
      with:
        name: wheel-${{ matrix.py-version }}
        path: ./dist/*.whl

  test-ce:
    runs-on: ubuntu-latest
    needs: [build, get-server-rc]
    if: ${{ always() && needs.build.result == 'success' && (needs.get-server-rc.result == 'success' || needs.get-server-rc.result == 'skipped') }}
    strategy:
      matrix:
        py-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - name: Get server release candidate
      if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') }}
      uses: actions/download-artifact@v3
      with:
        name: server-rc

    - name: "Check file existence"
      uses: andstor/file-existence-action@v2
      id: check_files
      with:
        files: "*.deb"

    - uses: ./.github/actions/install-server-rc
      if: steps.check_files.outputs.files_exists == 'true'

    - name: Use Docker Hub RC
      if: ${{ contains(github.event.pull_request.labels.*.name, 'docker-hub-rc') }}
      uses: ./.github/actions/setup-docker-hub-rc
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up release server
      if: |
        !contains(github.event.pull_request.labels.*.name, 'qe-rc') &&
        !contains(github.event.pull_request.labels.*.name, 'docker-hub-rc')
      uses: reugn/github-action-aerospike@dev
      with:
        port: 3000

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py-version }}
        architecture: 'x64'

    - uses: actions/download-artifact@v3
      with:
        name: wheel-${{ matrix.py-version }}

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Run tests
      run: python -m pytest ./new_tests
      working-directory: test

  test-ee:
    # TODO: support EE rc tests
    if: |
      !contains(github.event.pull_request.labels.*.name, 'qe-rc') && !contains(github.event.pull_request.labels.*.name, 'docker-hub-rc')
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: 'x64'

    - uses: actions/download-artifact@v3
      with:
        name: wheel-3.7

    - name: Install client
      run: pip install *.whl

    - name: Install test dependencies
      run: pip install -r test/requirements.txt

    - name: Install crudini to manipulate config.conf
      run: pip install crudini

    - name: Add enterprise edition config to config.conf
      run: |
        crudini --set config.conf enterprise-edition hosts 127.0.0.1:3000
        crudini --set config.conf enterprise-edition user superuser
        crudini --set config.conf enterprise-edition password superuser
      working-directory: test

    - name: Create config folder to store configs in
      run: mkdir configs

    - name: Get default aerospike.conf from Docker server EE container
      run: |
        docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server-enterprise
        sleep 5
        docker cp aerospike:/etc/aerospike/aerospike.conf ./configs/aerospike.conf
        docker container stop aerospike
        docker container rm aerospike

    - name: Enable security features using aerospike.conf
      # Security stanza
      run: echo -e "security {\n\n}\n" >> ./aerospike.conf
      working-directory: ./configs

    - name: Run enterprise edition server
      run: docker run -tid -v $(pwd)/configs:/opt/aerospike/etc -p 3000:3000 --name aerospike aerospike/aerospike-server-enterprise:latest asd --config-file /opt/aerospike/etc/aerospike.conf

    - name: Wait for server to start
      run: sleep 5

    - name: Create user in database for tests
      # Use default admin user to create another user for testing
      run: docker exec aerospike asadm --user admin --password admin --enable -e "manage acl create user superuser password superuser roles read-write-udf sys-admin user-admin data-admin"

    - name: Run tests
      run: python -m pytest ./new_tests/test_admin_*.py
      working-directory: test

    - name: Show logs if failed
      if: ${{ failure() }}
      run: |
        docker container logs aerospike
        cat ./configs/aerospike.conf

  spellcheck-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install dependencies for checking spelling in docs
      # TODO: find way to split up dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: sphinx-build -b spelling . spelling -W --keep-going
      working-directory: doc

  check-links-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Install documentation dependencies
      run: python -m pip install -r doc/requirements.txt
    - name: Check spelling
      run: sphinx-build -b linkcheck . links
      working-directory: doc
