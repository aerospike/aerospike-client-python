name: Build on MacOS

on:
  push:
    branches: [ "master", "stage" ]
  pull_request:
    branches: [ "stage" ]

jobs:
  build:
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set up Python 3
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Get cached kubelab
      id: kubelab-cache
      uses: actions/cache@v3
      with:
        path: ~/kubelab3.tgz
        key: kubelab-key
    - name: Download kubelab to run docker
      if: steps.kubelab-cache.outputs.cache-hit != 'true'
      run: |
        cd ~
        curl https://kubelab.s3.eu-west-1.amazonaws.com/kubelab3.tgz --output kubelab3.tgz
    - name: Install kubelab
      run: |
        cd ~
        tar -zxvf kubelab3.tgz
        cd ~/.kubelab/etc
        sed -i.bak1 's/CPUS=8/CPUS=2/g' settings.sh
        sed -i.bak2 's/RAMSIZE=8192/RAMSIZE=4096/g' settings.sh

        cd ~/.kubelab/bin
        ./install.sh
        ./start.sh
    - name: Build and install client
      run: |
        export SSL_LIB_PATH="/usr/local/opt/openssl@1.1/lib/"
        export CPATH="/usr/local/opt/openssl@1.1/include/"
        export STATIC_SSL=1

        python3 setup.py build --force
        python3 setup.py install --force
    - name: Run tests
      run: |
        export DOCKER_HOST=192.168.105.2
        docker run --name aerospike -d -p 3000:3000 aerospike/aerospike-server

        # Wait until server is fully spun up
        sleep 3

        # Configure server for tests
        docker exec aerospike sed -E -i'.bak' "s/^namespace test.*$/namespace test {\n\tdefault-ttl 3d\n\tallow-ttl-without-nsup true/" /etc/aerospike/aerospike.conf

        # Configure client to connect to server
        cd test/
        ipAddress=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' aerospike)
        sed -i.bak -E "s/hosts : .*/hosts : ${ipAddress}:3000/g" config.conf

        python3 -m pip install -r requirements.txt
        python3 -m pytest new_tests/
