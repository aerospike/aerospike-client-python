name: Build wheels
run-name: Build wheels (run_tests=${{ inputs.run_tests }}, use-server-rc=${{ inputs.use-server-rc }}, server-tag=${{ inputs.server-tag }}, test-macos-x86=${{ inputs.test-macos-x86 }}, apply-no-optimizations=${{ inputs.apply-no-optimizations }}, include-debug-info-for-macos=${{ inputs.include-debug-info-for-macos }})

# Builds manylinux wheels and source distribution
# If running tests, publish results in commit status
# For each build, upload to Github as an artifact if it passes testing or does not need to run tests

on:
  workflow_dispatch:
    inputs:
      # If we only want to check that the builds pass on an arbitrary branch
      run_tests:
        description: "Run integration tests"
        required: true
        type: boolean
        default: false
      use-server-rc:
        type: boolean
        required: true
        default: false
        description: 'Test against server release candidate?'
      # If we are creating a backport and want to test an arbitrary branch against an older server version
      server-tag:
        required: true
        default: 'latest'
        description: 'Server docker image tag'
      apply-no-optimizations:
        required: true
        type: boolean
        default: false
        description: 'Linux and macOS: apply -O0 when building C and Python client?'
      include-debug-info-for-macos:
        required: true
        type: boolean
        default: false
        description: 'macOS: include source files and line numbers for both C and Python client for debugging?'

  workflow_call:
    inputs:
      # The "dev" tests test the artifacts against a server release
      # The "stage" tests and release workflow only need to build the artifacts, not test them
      run_tests:
        description: "Run integration tests"
        required: false
        type: boolean
        default: false
      ref:
        type: string
        required: false
      # Calling workflow doesn't actually use the options below
      # But we need to set default values for workflow calls to use
      use-server-rc:
        required: false
        default: true
        type: boolean
      server-tag:
        type: string
        required: false
        default: 'latest'
      apply-no-optimizations:
        required: false
        type: boolean
        default: false
      include-debug-info-for-macos:
        required: false
        type: boolean
        default: false
      # See comment about this hack in
      is_workflow_call:
        type: boolean
        default: true
        required: false
    secrets:
      DOCKER_HUB_BOT_USERNAME:
        required: false
      DOCKER_HUB_BOT_PW:
        required: false
      MAC_M1_SELF_HOSTED_RUNNER_PW:
        required: false

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-22.04
    steps:
    - name: Show job status for commit
      # If workflow_call triggered this job, github.event_name will inherit the event of the calling workflow
      # https://github.com/actions/runner/issues/3146#issuecomment-2000017097
      # Commit status will already be shown by the calling workflow for these events
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      uses: myrotvorets/set-commit-status-action@v2.0.0
      with:
        sha: ${{ github.sha }}
        context: "Build wheels (sdist)"

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.ref }}
        fetch-depth: 0

    - name: Install build dependencies (pip packages)
      run: python3 -m pip install -r requirements.txt

    - name: Build source distribution
      run: python3 -m build --sdist

    - name: Upload source distribution to GitHub
      uses: actions/upload-artifact@v4
      with:
        path: ./dist/*.tar.gz
        name: sdist.build

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      # Always run even if job failed or is cancelled
      # But we don't want to show anything if the calling workflow was triggered by these events
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (sdist)"

  build-wheels:
    runs-on: ${{ matrix.platforms[1] }}
    strategy:
      fail-fast: false
      matrix:
        platforms: [
          # Wheel type, Github runner OS
          ["manylinux_x86_64", "ubuntu-22.04"],
          ["manylinux_aarch64", "ubuntu-22.04"],
          ["macosx_x86_64", "macos-12-large"],
          ["macosx_arm64", "macos-13-xlarge"],
          ["win_amd64", "windows-2022"]
        ]
        # Python versions to build wheels on
        python: [
          "cp38",
          "cp39",
          "cp310",
          "cp311",
          "cp312"
        ]

    steps:
    - name: Get build identifier for cibuildwheel
      run: echo "BUILD_IDENTIFIER=${{ matrix.python }}-${{ matrix.platforms[0] }}" >> $GITHUB_ENV
      shell: bash

    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        context: "Build wheels (${{ env.BUILD_IDENTIFIER }})"

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.ref }}
        # We need the last tag before the ref, so we can relabel the version if needed
        fetch-depth: 0

    - name: Add msbuild to PATH
      if: ${{ matrix.platforms[0] == 'win_amd64' }}
      uses: microsoft/setup-msbuild@v1.1

    - name: Install C client deps
      if: ${{ matrix.platforms[0] == 'win_amd64' }}
      run: nuget restore
      working-directory: aerospike-client-c/vs

    - name: Set up QEMU for building and testing Linux aarch64 wheels
      if: ${{ endsWith(matrix.platforms[0], 'aarch64') }}
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64

    - name: Should we run the integration tests?
      # Run tests if flag is set to true
      # We only build macOS arm64 and Windows wheels here, and test them in another job
      run: echo RUN_INTEGRATION_TESTS_IN_THIS_JOB=${{ inputs.run_tests && matrix.platforms[0] != 'macosx_arm64' && matrix.platforms[0] != 'win_amd64' }} >> $GITHUB_ENV
      # We're using bash syntax for environment variables. Windows steps uses powershell by default
      shell: bash

    - name: Setup Docker on macOS x86 for testing
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' && matrix.platforms[0] == 'macosx_x86_64' }}
      uses: ./.github/actions/setup-docker-on-macos

    - uses: ./.github/actions/run-ee-server-and-setup-config-conf
      with:
        running-tests-from-docker-container: ${{ startsWith(matrix.platforms[0], 'manylinux') }}

    - name: By default, disable tests (only run basic import test)
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'false' }}
      # Use double quotes to enclose Python code since powershell doesn't seem to allow using single quotes
      # https://stackoverflow.com/questions/34379631/syntaxerror-eol-while-scanning-string-literal
      run: echo "TEST_COMMAND=python -c \"import aerospike\"" >> $GITHUB_ENV
      shell: bash

    - name: Install experimental Python 3.8 arm64 build
      # By default, cibuildwheel installs and uses Python 3.8 x86_64 to cross compile arm64 wheels
      # There is a bug that builds x86_64 wheels instead, so we install this Python 3.8 native ARM build to ensure
      # the wheel is compiled in arm64
      # https://cibuildwheel.pypa.io/en/stable/faq/#macos-building-cpython-38-wheels-on-arm64
      if: ${{ matrix.platforms[0] == 'macosx_arm64' && matrix.python == 'cp38' }}
      run: |
        curl -o /tmp/Python38.pkg https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg
        sudo installer -pkg /tmp/Python38.pkg -target /
        sh "/Applications/Python 3.8/Install Certificates.command"

    - name: Enable integration tests
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' }}
      run: echo "TEST_COMMAND=cd {project}/test/ && pip install -r requirements.txt && python -m pytest new_tests/" >> $GITHUB_ENV
      shell: bash

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.18.1
      env:
        CIBW_ENVIRONMENT_PASS_LINUX: ${{ inputs.apply-no-optimizations && 'UNOPTIMIZED' || '' }}
        CIBW_ENVIRONMENT_MACOS: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        # We are cross compiling for arm64 on x86_64 hardware, so we need to be specific
        CIBW_ARCHS_LINUX: ${{ matrix.platforms[0] == 'manylinux_aarch64' && 'aarch64' || 'auto' }}
        CIBW_BUILD: ${{ env.BUILD_IDENTIFIER }}
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path ./aerospike-client-c/vs/x64/Release -w {dest_dir} {wheel}"
        CIBW_TEST_COMMAND: ${{ env.TEST_COMMAND }}

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        path: ./wheelhouse/*.whl
        name: ${{ env.BUILD_IDENTIFIER }}.build

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (${{ env.BUILD_IDENTIFIER }})"

  test-macOS-m1:
    needs: build-wheels
    if: ${{ inputs.run_tests }}
    runs-on: [
      self-hosted,
      macOS,
      ARM64
    ]
    strategy:
      matrix:
        python-version: [
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"],
          ["cp312", "3.12"]
        ]
      fail-fast: false
    steps:
    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        context: "Test macOS M1 (${{ matrix.python-version[0] }})"

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.ref }}

    - name: Install or upgrade Python
      run: brew install python@${{ matrix.python-version[1] }}

    # Self-hosted runner only
    # Need to be able to save Docker Hub credentials to keychain
    - run: security unlock-keychain -p ${{ secrets.MAC_M1_SELF_HOSTED_RUNNER_PW }}
      if: ${{ inputs.use-server-rc }}

    - if: ${{ inputs.use-server-rc }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    - name: Use server rc
      if: ${{ inputs.use-server-rc }}
      run: echo IMAGE_NAME="${{ vars.SERVER_RC_REPO_LINK }}:${{ inputs.server-tag }}" >> $GITHUB_ENV

    - name: Use server release
      if: ${{ !inputs.use-server-rc }}
      run: echo IMAGE_NAME="${{ vars.SERVER_REPO_LINK }}:${{ inputs.server-tag }}" >> $GITHUB_ENV

    - run: python${{ matrix.python-version[1] }} -m pip install --find-links=wheelhouse/ --no-index aerospike

    - run: python${{ matrix.python-version[1] }} -m pip install -r requirements.txt
      working-directory: test

    - run: python${{ matrix.python-version[1] }} -m pytest new_tests/
      working-directory: test

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (${{ matrix.python-version[0] }}-macosx_arm64)"

  test-windows:
    needs: build-wheels
    if: ${{ inputs.run_tests }}
    strategy:
      fail-fast: false
      matrix:
        python: [
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"],
          ["cp312", "3.12"]
        ]
    runs-on: [self-hosted, Windows, X64]
    steps:
      - name: Show job status for commit
        uses: myrotvorets/set-commit-status-action@v2.0.0
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        with:
          sha: ${{ github.sha }}
          context: "Test Windows (${{ matrix.python[0] }}-win_amd64)"
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - run: docker run -d -p 3000:3000 --name aerospike aerospike/aerospike-server
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.python[0] }}-win_amd64.build

      - name: Create config.conf
        run: cp config.conf.template config.conf
        working-directory: test

      - name: Install wheel
        run: python${{ matrix.python[1] }} -m pip install aerospike --force-reinstall --no-index --find-links=./
      - name: Connect to Docker container on remote machine with Docker daemon
        # DOCKER_HOST contains the IP address of the remote machine
        run: |
          python${{ matrix.python[1] }} -m pip install crudini==0.9.4
          $env:DOCKER_HOST_IP = $env:DOCKER_HOST | foreach {$_.replace("tcp://","")} | foreach {$_.replace(":2375", "")}
          python${{ matrix.python[1] }} -m crudini --set config.conf community-edition hosts ${env:DOCKER_HOST_IP}:3000
        working-directory: test

      - run: python${{ matrix.python[1] }} -m pip install pytest -c requirements.txt
        working-directory: test

      - run: python${{ matrix.python[1] }} -m pytest new_tests/
        working-directory: test

      - name: Show job status for commit
        if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
        uses: myrotvorets/set-commit-status-action@v2.0.0
        with:
          sha: ${{ github.sha }}
          status: ${{ job.status }}
          context: "Test Windows (${{ matrix.python[0] }}-win_amd64)"
