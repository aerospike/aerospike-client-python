name: Build wheels
run-name: Build wheels (run_tests=${{ inputs.run_tests }}, use-server-rc=${{ inputs.use-server-rc }}, server-tag=${{ inputs.server-tag }})

# Builds manylinux wheels and source distribution
# If running tests, publish results in commit status
# Publishes wheels and source distribution on Github Actions if no tests are run or tests pass

on:
  workflow_call:
    inputs:
      # The dev tests test the artifacts against a server release
      # The stage tests and release workflow only need to build the artifacts
      run_tests:
        description: "Run integration tests"
        required: true
        type: boolean
        default: true
      # This reusable workflow can be re-run from a manual rerun of the dev workflow with a custom server tag as input
      server-tag:
        type: string
        required: false
        default: 'latest'
        description: 'Server docker image tag'
      commit_sha:
        type: string
        required: false
      # Calling workflow doesn't actually use this
      # But we need to set this to be true for workflow calls
      use-server-rc:
        required: false
        default: true
        type: boolean
    secrets:
      # For running a server RC
      # Not necessary when using a server release
      DOCKER_HUB_BOT_USERNAME:
        required: false
      DOCKER_HUB_BOT_PW:
        required: false
      MAC_M1_SELF_HOSTED_RUNNER_PW:
        required: false
  workflow_dispatch:
    inputs:
      # If we only want to check that the builds pass on an arbitrary branch
      run_tests:
        description: "Run integration tests"
        required: true
        type: boolean
        default: true
      use-server-rc:
        type: boolean
        required: true
        default: false
        description: 'Test against server release candidate?'
      # If we are creating a backport and want to test an arbitrary branch against an older server version
      server-tag:
        required: true
        default: 'latest'
        description: 'Server docker image tag'

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ inputs.commit_sha }}

    - name: Install build dependencies (pip packages)
      run: python3 -m pip install -r requirements.txt

    - name: Build source distribution
      run: python3 -m build --sdist

    - name: Upload source distribution to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./dist/*.tar.gz
        name: sdist

  manylinux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          "cp38",
          "cp39",
          "cp310",
          "cp311"
        ]
        platform: [
          "x86_64",
          "aarch64"
        ]

    steps:
    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      with:
        sha: ${{ github.sha }}
        context: "Build wheels (${{ matrix.python }}-manylinux_${{ matrix.platform }})"

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ inputs.commit_sha }}

    - name: Set up QEMU for cross compiling arm64
      if: ${{ matrix.platform == 'aarch64' }}
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64

    - uses: ./.github/actions/run-ee-server
      if: ${{ inputs.run_tests }}
      with:
        use-server-rc: ${{ inputs.use-server-rc }}
        server-tag: ${{ inputs.server-tag }}
        docker-hub-username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        docker-hub-password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    - name: Set config.conf to use Docker IP address of Aerospike server
      if: ${{ inputs.run_tests }}
      # config.conf should be copied into the cibuildwheel Docker container
      run: |
        export SERVER_DOCKER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' aerospike)
        # Install crudini
        pip install crudini -c ../.github/workflows/requirements.txt
        sed -i "s/127.0.0.1:3000//" config.conf
        crudini --set config.conf enterprise-edition hosts ${SERVER_DOCKER_IP}:3000
      working-directory: test

    - name: Enable tests
      if: ${{ inputs.run_tests }}
      run: echo "TEST_COMMAND=cd {project}/test/ && pip install -r requirements.txt && python -m pytest new_tests/" >> $GITHUB_ENV

    - name: Disable tests (only run basic import test)
      if: ${{ !inputs.run_tests }}
      run: echo "TEST_COMMAND=python -c 'import aerospike'" >> $GITHUB_ENV

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-manylinux_${{ matrix.platform }}
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "${{ matrix.platform }}"
        CIBW_TEST_COMMAND: ${{ env.TEST_COMMAND }}

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        name: ${{ matrix.python }}-manylinux_${{ matrix.platform }}

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: always()
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (${{ matrix.python }}-manylinux_${{ matrix.platform }})"

  macOS-x86:
    strategy:
      fail-fast: false
      matrix:
        python: [
          "cp38",
          "cp39",
          "cp310",
          "cp311"
        ]
    runs-on: macos-12
    steps:
    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      with:
        sha: ${{ github.sha }}
        context: "Build wheels (${{ matrix.python }}-macosx_x86_64)"

    - uses: actions/checkout@v3
      with:
        submodules: recursive
        ref: ${{ inputs.commit_sha }}

    - name: Install Docker Engine
      if: ${{ inputs.run_tests }}
      run: brew install colima

    - name: Install Docker client
      if: ${{ inputs.run_tests }}
      run: brew install docker

    - name: Start Docker Engine
      if: ${{ inputs.run_tests }}
      run: colima start

    - uses: ./.github/actions/run-ee-server
      if: ${{ inputs.run_tests }}
      with:
        use-server-rc: ${{ inputs.use-server-rc }}
        server-tag: ${{ inputs.server-tag }}
        docker-hub-username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        docker-hub-password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    - name: Enable tests
      if: ${{ inputs.run_tests }}
      run: echo "TEST_COMMAND=cd {project}/test/ && pip install -r requirements.txt && python -m pytest new_tests/" >> $GITHUB_ENV

    - name: Disable tests (only run basic import test)
      if: ${{ !inputs.run_tests }}
      run: echo "TEST_COMMAND=python -c 'import aerospike'" >> $GITHUB_ENV

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-macosx_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_ENVIRONMENT: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        CIBW_ARCHS: "x86_64"
        CIBW_TEST_COMMAND: ${{ env.TEST_COMMAND }}

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.python }}-macosx_x86_64
        path: wheelhouse/*.whl

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: always()
      with:
        status: ${{ job.status }}
        sha: ${{ github.sha }}
        context: "Build wheels (${{ matrix.python }}-macosx_x86_64)"

  macOS-m1:
    runs-on: [
      self-hosted,
      macOS,
      ARM64
    ]
    strategy:
      matrix:
        python-version: [
          "3.8",
          "3.9",
          "3.10",
          "3.11"
        ]
      fail-fast: false
    steps:
    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      with:
        sha: ${{ github.sha }}
        context: "Build wheels (${{ matrix.python-version }}-macosx_arm64)"

    - uses: actions/checkout@v3
      with:
        submodules: recursive
        ref: ${{ inputs.commit_sha }}

    # Update dependencies if needed
    - name: Add brew to path
      run: echo PATH=$PATH:/opt/homebrew/bin/ >> $GITHUB_ENV

    - name: Install or upgrade Python
      run: brew install python@${{ matrix.python-version }}

    - name: Install or upgrade OpenSSL 1.1
      run: brew install openssl@1.1

    - name: Set environment variables for building
      run: |
        openssl_path=$(brew --prefix openssl@1.1)
        echo SSL_LIB_PATH="$openssl_path/lib/" >> $GITHUB_ENV
        echo CPATH="$openssl_path/include/" >> $GITHUB_ENV
        echo STATIC_SSL=1 >> $GITHUB_ENV

    - name: Install pip build packages
      run: python${{ matrix.python-version }} -m pip install -r requirements.txt

    # Self-hosted runner only
    # Need to be able to save Docker Hub credentials to keychain
    - run: security unlock-keychain -p ${{ secrets.MAC_M1_SELF_HOSTED_RUNNER_PW }}
      if: ${{ inputs.run_tests && inputs.use-server-rc }}

    - if: ${{ inputs.run_tests && inputs.use-server-rc }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    - name: Use server rc
      if: ${{ inputs.run_tests && inputs.use-server-rc }}
      run: echo IMAGE_NAME="${{ vars.SERVER_RC_REPO_LINK }}:${{ inputs.server-tag }}" >> $GITHUB_ENV

    - name: Use server release
      if: ${{ inputs.run_tests && !inputs.use-server-rc }}
      run: echo IMAGE_NAME="${{ vars.SERVER_REPO_LINK }}:${{ inputs.server-tag }}" >> $GITHUB_ENV

    - name: Run server
      if: ${{ inputs.run_tests }}
      run: docker run -d -p 3000:3000 --name aerospike ${{ env.IMAGE_NAME }}

    - run: python${{ matrix.python-version }} -m build

    - name: Install delocate
      run: python${{ matrix.python-version }} -m pip install delocate -c requirements.txt
      working-directory: .github/workflows

    - run: delocate-wheel --require-archs "arm64" -w wheelhouse/ -v dist/*.whl
    - run: python${{ matrix.python-version }} -m pip install --find-links=wheelhouse/ --no-index --force-reinstall aerospike

    - run: python${{ matrix.python-version }} -m pip install -r requirements.txt
      if: ${{ inputs.run_tests }}
      working-directory: test

    - run: python${{ matrix.python-version }} -m pytest new_tests/
      if: ${{ inputs.run_tests }}
      working-directory: test

    - run: python${{ matrix.python-version }} -c "import aerospike"
      if: ${{ !inputs.run_tests }}

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.python-version }}-macosx_arm64
        path: wheelhouse/*.whl

    - name: Stop server
      if: ${{ always() && inputs.run_tests }}
      run: |
        docker container stop aerospike
        docker container prune -f

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: always()
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (${{ matrix.python-version }}-macosx_arm64)"
