name: Build wheels

# Builds wheels and sends to QE and Aerospike artifactory
on:
  workflow_dispatch:
    inputs:
      use-server-rc:
        type: boolean
        required: true
        default: false

jobs:
  test-sdist:
    name: Build and install sdist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: 'x64'

    - run: sudo apt update
    - name: Install build dependencies (apt packages)
      run: sudo apt install python3-dev libssl-dev -y
    - name: Install build dependencies (pip packages)
      run: python3 -m pip install build

    - name: Build source distribution
      run: python3 -m build --sdist

    - name: Upload sdist to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./dist/*.tar.gz
        # Artifact name, not the file name
        name: sdist

  manylinux_arm64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          "cp37",
          "cp38",
          "cp39",
          "cp310",
          "cp311"
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up QEMU for cross compiling arm64
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Run Aerospike server release candidate
      if: ${{ inputs.use-server-rc }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike.jfrog.io/docker/aerospike/aerospike-server-rc:latest

    - name: Set up Aerospike server
      if: ${{ !inputs.use-server-rc }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Set config.conf to use Docker IP address of Aerospike server
      # config.conf should be copied into the cibuildwheel Docker container
      run: |
        export SERVER_DOCKER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' aerospike)
        pip install crudini
        crudini --set config.conf community-edition hosts ${SERVER_DOCKER_IP}:3000
      working-directory: test

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-manylinux_aarch64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "aarch64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-aarch64-${{ matrix.python }}

  manylinux_x86_64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"]
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Run Aerospike server release candidate
      if: ${{ inputs.use-server-rc }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike.jfrog.io/docker/aerospike/aerospike-server-rc:latest

    - name: Set up Aerospike server
      if: ${{ !inputs.use-server-rc }}
      run: docker run -d --name aerospike -p 3000-3002:3000-3002 aerospike/aerospike-server

    - name: Wait for server to start
      run: sleep 5

    - name: Set config.conf to use Docker IP address of Aerospike server
      # config.conf should be copied into the cibuildwheel Docker container
      run: |
        export SERVER_DOCKER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' aerospike)
        pip install crudini
        crudini --set config.conf community-edition hosts ${SERVER_DOCKER_IP}:3000
      working-directory: test

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python[0] }}-manylinux_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "x86_64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-x86_64-${{ matrix.python[0] }}

  macOS-x86:
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"]
        ]
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version[1] }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version[1] }}

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python-version[0] }}-macosx_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_ENVIRONMENT: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        CIBW_ARCHS: "x86_64"
        CIBW_BEFORE_TEST: >
          export USE_SERVER_RC=${{ inputs.use-server-rc }} &&
          vagrant up &&
          sleep 3 &&
          pip install -r test/requirements.txt
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          python -m pytest new_tests/

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-x86_64-${{ matrix.python-version[0] }}-wheel
        path: wheelhouse/*.whl

  macOS-m1:
    runs-on: [self-hosted, macOS, ARM64]
    strategy:
      fail-fast: false
      matrix:
        python-version: [
            "3.8",
            "3.9",
            "3.10",
            "3.11"
        ]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # Update dependencies if needed
    - name: Add brew to path
      run: echo PATH=$PATH:/opt/homebrew/bin/ >> $GITHUB_ENV
    - run: brew install python@${{ matrix.python-version }}
    - run: brew install openssl@1.1

    - run: |
        openssl_path=$(brew --prefix openssl@1.1)
        echo SSL_LIB_PATH="$openssl_path/lib/" >> $GITHUB_ENV
        echo CPATH="$openssl_path/include/" >> $GITHUB_ENV
        echo STATIC_SSL=1 >> $GITHUB_ENV

    - run: python${{ matrix.python-version }} -m pip install build delocate

    - name: Run Aerospike server release candidate
      if: ${{ inputs.use-server-rc }}
      run: sshpass -p ${{ secrets.M1_WORKFLOW_SERVER_PW }} ssh -n -o StrictHostKeyChecking=no citrusleaf@${{ secrets.M1_WORKFLOW_SERVER_ADDRESS }} docker run -d --pull "always" --name aerospike -p 3000-3002:3000-3002 aerospike.jfrog.io/docker/aerospike/aerospike-server-rc:latest

    - name: Set up Aerospike server
      if: ${{ !inputs.use-server-rc }}
      run: echo IMAGE_NAME="aerospike/aerospike-server" >> $GITHUB_ENV

    - name: Run server
      run: docker run -d -p 3000:3000 --name aerospike ${{ env.IMAGE_NAME }}

    - run: python${{ matrix.python-version }} -m build
    - run: delocate-wheel --require-archs "arm64" -w wheelhouse/ -v dist/*.whl
    - run: python${{ matrix.python-version }} -m pip install --find-links=wheelhouse/ --no-index --force-reinstall aerospike

    - run: python${{ matrix.python-version }} -m pip install -r requirements.txt
      working-directory: test

    - run: python${{ matrix.python-version }} -m pytest new_tests/
      working-directory: test

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: macos-amd64-${{ matrix.python-version }}-wheel
        path: wheelhouse/*.whl

    - name: Stop server
      if: ${{ always() }}
      run: |
        docker container stop aerospike
        docker container prune -f

  send-to-qe:
    needs: [manylinux_x86_64, manylinux_arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: echo "Upload to QE"
      # - uses: shallwefootball/s3-upload-action@master
      #   with:
      #     aws_key_id: ${{ secrets.AWS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws_bucket: ${{ secrets.AWS_BUCKET }}
      #     # Send all distributions to QE build system
      #     source_dir: './wheelhouse'
