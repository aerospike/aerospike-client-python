name: Build wheels

# Builds wheels and sends to QE and Aerospike artifactory
on:
  workflow_dispatch:
    inputs:
      qe-rc:
        default: false
        required: true
        type: boolean
      docker-hub-rc:
        default: false
        required: true
        type: boolean

jobs:
  get-server-rc:
    runs-on: ubuntu-latest
    if: |
      ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') || inputs.qe-server-rc == true }}
    steps:
    # Store sensitive data in openvpn config template
    - name: Install OpenVPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved

    - uses: actions/checkout@v2

    - name: Fill in openvpn config file
      uses: bluwy/substitute-string-action@v1
      id: sub
      with:
        _input-file: ".github/workflows/aerospike_vpn_nosplit.ovpn"
        _format-key: '%%key%%'
        CA_CERT: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_CA }}
        STATIC_KEY: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_STATIC_KEY }}
        _output-file: ".github/workflows/aerospike_vpn_nosplit.ovpn"

    - name: Connect to Aerospike VPN
      uses: "kota65535/github-openvpn-connect-action@v2"
      with:
        config_file: ".github/workflows/aerospike_vpn_nosplit.ovpn"
        username: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_USERNAME }}
        password: ${{ secrets.AEROSPIKE_VPN_NOSPLIT_PASSWORD }}

    - name: Get latest server release candidate
      run: |
        BUILDCTL_URL="build.browser.qe.aerospike.com/citrusleaf/qe.go/3.3.0-52-gd66bd4b/build/1.17/default/artifacts/buildctl.linux"
        curl -O --connect-timeout 60 $BUILDCTL_URL
        chmod 700 ./buildctl.linux

        BUILD_ID=$(./buildctl.linux rev --repo citrusleaf/aerospike-server --ref master | sed -n 2p | awk '{print $3}')
        ARTIFACTS_URL="build.browser.qe.aerospike.com/citrusleaf/aerospike-server/$BUILD_ID/build/x86-ubuntu-22.04/community/artifacts"

        # Download the .deb artifact
        wget --timeout=60 -r --no-parent --accept "*.deb" --no-directories $ARTIFACTS_URL

    - name: Upload server release candidate to Github
      uses: actions/upload-artifact@v3
      with:
        name: server-rc
        path: ./*.deb

  test-sdist:
    name: Build and install sdist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: 'x64'

    - run: sudo apt update
    - name: Install build dependencies (apt packages)
      run: sudo apt install python3-dev libssl-dev -y
    - name: Install build dependencies (pip packages)
      run: python3 -m pip install build

    - name: Build source distribution
      run: python3 -m build --sdist

    - name: Upload sdist to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./dist/*.tar.gz
        # Artifact name, not the file name
        name: sdist

  manylinux_arm64:
    needs: [get-server-rc]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          "cp37",
          "cp38",
          "cp39",
          "cp310",
          "cp311"
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up QEMU for cross compiling arm64
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Use Docker Hub RC
      if: ${{ contains(github.event.pull_request.labels.*.name, 'docker-hub-rc') || inputs.docker-hub-rc == true }}
      uses: ./.github/actions/setup-docker-hub-rc

    - name: Get server RC from QE
      if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') || inputs.qe-rc == true }}
      uses: actions/download-artifact@v3
      with:
        name: server-rc

    - name: Install server rc from QE
      uses: ./.github/actions/install-server-rc
      if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') || inputs.qe-rc == true }}

    - name: Set up server release version
      # If not using server rc at all
      if: |
        ${{ !contains(github.event.pull_request.labels.*.name, 'qe-rc') && !contains(github.event.pull_request.labels.*.name, 'docker-hub-rc')
        && inputs.qe-rc != true && inputs.docker-hub-rc != true }}
      uses: reugn/github-action-aerospike@dev
      with:
        port: 3000

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-manylinux_aarch64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "aarch64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          pip install crudini &&
          # Need to access host's internal ip address to access localhost
          crudini --set config.conf community-edition hosts host.docker.internal:3000 &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-aarch64-${{ matrix.python }}

  manylinux_x86_64:
    needs: [get-server-rc]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Python versions to build wheels on
        python: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"]
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Use Docker Hub RC
      if: ${{ contains(github.event.pull_request.labels.*.name, 'docker-hub-rc') || inputs.docker-hub-rc == true }}
      run: ./.github/actions/setup-docker-hub-rc

    - name: Get server RC from QE
      if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') || inputs.qe-rc == true }}
      uses: actions/download-artifact@v3
      with:
        name: server-rc

    - name: Install server rc from QE
      runs: ./.github/actions/install-server-rc
      if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') || inputs.qe-rc == true }}

    - name: Set up server release version
      # If not using server rc at all
      if: |
        ${{ !contains(github.event.pull_request.labels.*.name, 'qe-rc') && !contains(github.event.pull_request.labels.*.name, 'docker-hub-rc')
        && inputs.qe-rc != true && inputs.docker-hub-rc != true }}
      uses: reugn/github-action-aerospike@dev
      with:
        port: 3000

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python[0] }}-manylinux_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_ARCHS: "x86_64"
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          pip install -r requirements.txt &&
          pip install crudini &&
          crudini --set config.conf community-edition hosts host.docker.internal:3000 &&
          python -m pytest new_tests/

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl
        # Artifact name, not the file name
        name: manylinux-x86_64-${{ matrix.python[0] }}

  macOS-x86:
    # TODO: support running Docker Hub RC on MacOS
    if: ${{ contains(github.event.pull_request.labels.*.name, 'docker-hub-rc') == false && inputs.docker-hub-rc == false }}
    needs: [get-server-rc]
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          ["cp37", "3.7"],
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"]
        ]
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version[1] }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version[1] }}

    - name: Get server release candidate
      if: ${{ contains(github.event.pull_request.labels.*.name, 'qe-rc') == true || inputs.qe-rc == true }}
      uses: actions/download-artifact@v3
      with:
        name: server-rc

    - name: "Check file existence"
      uses: andstor/file-existence-action@v2
      id: check_files
      with:
        files: "*.deb"

    - name: Copy server RC to shared folder for Linux VM
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        mkdir vagrant_data
        mv *.deb vagrant_data/

    - name: Run Linux VM
      run: vagrant up

    - name: Wait for VM to be ready
      run: sleep 3

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python-version[0] }}-macosx_x86_64
        CIBW_BUILD_FRONTEND: build
        CIBW_ENVIRONMENT: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        CIBW_ARCHS: "x86_64"
        CIBW_BEFORE_TEST: >
          pip install -r test/requirements.txt
        CIBW_TEST_COMMAND: >
          cd {project}/test/ &&
          python -m pytest new_tests/

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-x86_64-${{ matrix.python-version[0] }}-wheel
        path: wheelhouse/*.whl

  macOS-m1:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'docker-hub-rc') == false && inputs.docker-hub-rc == false }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [
          macos-latest,
        ]
        # Python versions to build wheels on
        python: [
          "cp38",
          "cp39",
          "cp310",
          "cp311"
        ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.11.2
      env:
        CIBW_BUILD: ${{ matrix.python }}-macosx_arm64
        CIBW_BUILD_FRONTEND: build
        # Set env variables before building
        CIBW_BEFORE_ALL_MACOS: >
          git clone https://github.com/passepartoutvpn/openssl-apple &&
          cd openssl-apple &&
          export CONFIG_OPTIONS="no-shared" &&
          ./build-libssl.sh --version=1.1.1q --targets="macos64-arm64" --macos-sdk=$(xcrun --show-sdk-version) ||
          cat "./bin/MacOSX$(xcrun --show-sdk-version)-arm64.sdk/build-openssl-1.1.1q.log"
        CIBW_ENVIRONMENT: SSL_LIB_PATH="$(pwd)/openssl-apple/bin/MacOSX$(xcrun --show-sdk-version)-arm64.sdk/lib/" CPATH="$(pwd)/openssl-apple/bin/MacOSX$(xcrun --show-sdk-version)-arm64.sdk/include/" STATIC_SSL=1
        CIBW_ARCHS: "arm64"
        # CIBW_TEST_COMMAND: python -c "import aerospike"

    - name: Save macOS wheel
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-arm64-${{ matrix.python }}-wheel
        path: wheelhouse/*.whl
    # TODO: create Terraform deployment and send to there

  send-to-qe:
    needs: [manylinux_x86_64, manylinux_arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: echo "Upload to QE"
      # - uses: shallwefootball/s3-upload-action@master
      #   with:
      #     aws_key_id: ${{ secrets.AWS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws_bucket: ${{ secrets.AWS_BUCKET }}
      #     # Send all distributions to QE build system
      #     source_dir: './wheelhouse'
