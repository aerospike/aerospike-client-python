name: Build wheels
run-name: Build wheels (run_tests=${{ inputs.run_tests }}, use-server-rc=${{ inputs.use-server-rc }}, server-tag=${{ inputs.server-tag }}, test-macos-x86=${{ inputs.test-macos-x86 }}, apply-no-optimizations=${{ inputs.apply-no-optimizations }}, include-debug-info-for-macos=${{ inputs.include-debug-info-for-macos }})

# Builds manylinux wheels and source distribution
# If running tests, publish results in commit status
# For each build, upload to Github as an artifact if it passes testing or does not need to run tests

on:
  workflow_dispatch:
    inputs:
      # If we only want to check that the builds pass on an arbitrary branch
      run_tests:
        description: "Run integration tests"
        required: true
        type: boolean
        default: false
      use-server-rc:
        type: boolean
        required: true
        default: false
        description: 'Test against server release candidate?'
      # If we are creating a backport and want to test an arbitrary branch against an older server version
      server-tag:
        required: true
        default: 'latest'
        description: 'Server docker image tag'
      apply-no-optimizations:
        required: true
        type: boolean
        default: false
        description: 'Linux and macOS: apply -O0 when building C and Python client?'
      include-debug-info-for-macos:
        required: true
        type: boolean
        default: false
        description: 'macOS: include source files and line numbers for both C and Python client for debugging?'

  workflow_call:
    inputs:
      # The "dev" tests test the artifacts against a server release
      # The "stage" tests and release workflow only need to build the artifacts, not test them
      run_tests:
        description: "Run integration tests"
        required: false
        type: boolean
        default: false
      ref:
        type: string
        required: false
      # Calling workflow doesn't actually use the options below
      # But we need to set default values for workflow calls to use
      use-server-rc:
        required: false
        default: true
        type: boolean
      server-tag:
        type: string
        required: false
        default: 'latest'
      apply-no-optimizations:
        required: false
        type: boolean
        default: false
      include-debug-info-for-macos:
        required: false
        type: boolean
        default: false
      # See comment about this hack in
      is_workflow_call:
        type: boolean
        default: true
        required: false
    secrets:
      DOCKER_HUB_BOT_USERNAME:
        required: false
      DOCKER_HUB_BOT_PW:
        required: false
      MAC_M1_SELF_HOSTED_RUNNER_PW:
        required: false

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-22.04
    steps:
    - name: Show job status for commit
      # If workflow_call triggered this job, github.event_name will inherit the event of the calling workflow
      # https://github.com/actions/runner/issues/3146#issuecomment-2000017097
      # Commit status will already be shown by the calling workflow for these events
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      uses: myrotvorets/set-commit-status-action@v2.0.0
      with:
        sha: ${{ github.sha }}
        context: "Build wheels (sdist)"

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.ref }}
        fetch-depth: 0

    - name: Install build dependencies (pip packages)
      run: python3 -m pip install -r requirements.txt

    - name: Build source distribution
      run: python3 -m build --sdist

    - name: Upload source distribution to GitHub
      uses: actions/upload-artifact@v4
      with:
        path: ./dist/*.tar.gz
        name: sdist.build

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      # Always run even if job failed or is cancelled
      # But we don't want to show anything if the calling workflow was triggered by these events
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (sdist)"

  # We use separate jobs for macOS ARM64 and Windows
  # Because when we test wheels for those two platforms, we want to check that only the builds for those respective
  # platforms passed.
  # For now, we cannot consolidate all the builds into one job because matrix outputs are not a feature yet

  manylinux-and-macOS-x86:
    strategy:
      matrix:
        platform-tag-and-os: [
          ["manylinux_x86_64", "ubuntu-22.04"],
          ["manylinux_aarch64", "ubuntu-22.04"],
          ["macosx_x86_64", "macos-12-large"]
        ]
        python-tag: [
          "cp38",
          "cp39",
          "cp310",
          "cp311",
          "cp312"
        ]
    uses: ./.github/workflows/cibuildwheel.yml
    with:
      python-tag: ${{ matrix.python-tag }}
      platform-tags: ${{ matrix.platform-tag-and-os[0] }}
      os: ${{ matrix.platform-tag-and-os[1] }}
      unoptimized: ${{ inputs.apply-no-optimizations }}
      include-debug-info-for-macos: ${{ inputs.include-debug-info-for-macos }}

  build-macOS-m1:
    strategy:
      matrix:
        python-tag: [
          "cp38",
          "cp39",
          "cp310",
          "cp311",
          "cp312"
        ]
    uses: ./.github/workflows/cibuildwheel.yml
    with:
      python-tag: ${{ matrix.python-tag }}
      platform-tags: macosx_arm64
      os: macos-13-xlarge
      unoptimized: ${{ inputs.apply-no-optimizations }}
      include-debug-info-for-macos: ${{ inputs.include-debug-info-for-macos }}

  build-windows:
    strategy:
      matrix:
        python-tag: [
          "cp38",
          "cp39",
          "cp310",
          "cp311",
          "cp312"
        ]
    uses: ./.github/workflows/cibuildwheel.yml
    with:
      python-tag: ${{ matrix.python-tag }}
      platform-tags: win_amd64
      os: windows-2022

  test-macOS-m1:
    needs: build-macOS-m1
    if: ${{ inputs.run_tests }}
    runs-on: [
      self-hosted,
      macOS,
      ARM64
    ]
    strategy:
      matrix:
        python-version: [
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"],
          ["cp312", "3.12"]
        ]
      fail-fast: false
    steps:
    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        context: "Test macOS M1 (${{ matrix.python-version[0] }})"

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.ref }}

    # Self-hosted runner only
    # Need to be able to save Docker Hub credentials to keychain
    - run: security unlock-keychain -p ${{ secrets.MAC_M1_SELF_HOSTED_RUNNER_PW }}
      if: ${{ inputs.use-server-rc }}

    - if: ${{ inputs.use-server-rc }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_BOT_PW }}

    

    - run: python${{ matrix.python-version[1] }} -m pip install --find-links=wheelhouse/ --no-index aerospike

    - run: python${{ matrix.python-version[1] }} -m pip install -r requirements.txt
      working-directory: test

    - run: python${{ matrix.python-version[1] }} -m pytest new_tests/
      working-directory: test

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (${{ matrix.python-version[0] }}-macosx_arm64)"

  test-windows:
    needs: build-windows
    if: ${{ inputs.run_tests }}
    strategy:
      fail-fast: false
      matrix:
        python: [
          ["cp38", "3.8"],
          ["cp39", "3.9"],
          ["cp310", "3.10"],
          ["cp311", "3.11"],
          ["cp312", "3.12"]
        ]
    runs-on: [self-hosted, Windows, X64]
    steps:
      - name: Show job status for commit
        uses: myrotvorets/set-commit-status-action@v2.0.0
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        with:
          sha: ${{ github.sha }}
          context: "Test Windows (${{ matrix.python[0] }}-win_amd64)"
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - run: docker run -d -p 3000:3000 --name aerospike aerospike/aerospike-server
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.python[0] }}-win_amd64.build

      - name: Create config.conf
        run: cp config.conf.template config.conf
        working-directory: test

      - name: Install wheel
        run: python${{ matrix.python[1] }} -m pip install aerospike --force-reinstall --no-index --find-links=./
      - name: Connect to Docker container on remote machine with Docker daemon
        # DOCKER_HOST contains the IP address of the remote machine
        run: |
          python${{ matrix.python[1] }} -m pip install crudini==0.9.4
          $env:DOCKER_HOST_IP = $env:DOCKER_HOST | foreach {$_.replace("tcp://","")} | foreach {$_.replace(":2375", "")}
          python${{ matrix.python[1] }} -m crudini --set config.conf community-edition hosts ${env:DOCKER_HOST_IP}:3000
        working-directory: test

      - run: python${{ matrix.python[1] }} -m pip install pytest -c requirements.txt
        working-directory: test

      - run: python${{ matrix.python[1] }} -m pytest new_tests/
        working-directory: test

      - name: Show job status for commit
        if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
        uses: myrotvorets/set-commit-status-action@v2.0.0
        with:
          sha: ${{ github.sha }}
          status: ${{ job.status }}
          context: "Test Windows (${{ matrix.python[0] }}-win_amd64)"
