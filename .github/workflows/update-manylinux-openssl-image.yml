name: Update manylinux openssl image
run-name: 'Update manylinux openssl image (openssl-version=${{ inputs.openssl-version }}, set-latest-tag=${{ inputs.set-latest-tag }})'

on:
  workflow_dispatch:
    inputs:
      openssl-version:
        required: true
      # Set to true when we want to update our custom manylinux image used in production
      # Set to false if we want to test changes to the image without affecting prod
      set-latest-tag:
        required: false
        default: false
        type: boolean

jobs:
  main:
    env:
      REGISTRY: ghcr.io
    strategy:
      matrix:
        arch-and-runner-os: [
          [x86_64, ubuntu-24.04],
          [aarch64, aerospike_arm_runners_2]
        ]
      fail-fast: false

    runs-on: ${{ matrix.arch-and-runner-os[1] }}
    steps:
    - uses: actions/checkout@v4
      with:
        sparse-checkout: |
          .github/workflows

    # TODO: use same version as in pinned cibuildwheel version
    - run: docker pull quay.io/pypa/manylinux2014_${{ matrix.arch-and-runner-os[0] }}

    - uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ${{ env.REGISTRY }}/aerospike/manylinux2014_${{ matrix.arch-and-runner-os[0] }}
        flavor: latest=${{ inputs.set-latest-tag }}

    - name: Set up Docker Buildx so we can cache our Docker image layers
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        # Don't want to use default Git context or else it will clone the whole Python client repo again
        context: .github/workflows
        file: .github/workflows/manylinux2014-openssl.Dockerfile
        build-args: |
          OPENSSL_VERSION=${{ inputs.openssl-version }}
          CPU_ARCH=${{ matrix.arch-and-runner-os[0] }}
        # setup-buildx-action configures Docker to use the docker-container build driver
        # This driver doesn't publish an image locally by default
        # so we have to manually enable it
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Also cache intermediate layers to make development faster
        cache-from: type=gha
        cache-to: type=gha,mode=max
