name: 'Build wheels using cibuildwheel'

on:
  workflow_call:
    inputs:
      python-tag:
        type: string
        required: true
      platform-tag:
        type: string
        required: true
      os:
        type: string
        required: true

jobs:
  cibuildwheel:
    runs-on: ${{ inputs.os }}
    steps:
    - name: Get build identifier for cibuildwheel
      run: echo "BUILD_IDENTIFIER=${{ inputs.python-tag }}-${{ inputs.platform-tag }}" >> $GITHUB_ENV
      shell: bash

    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        context: "Build wheels (${{ env.BUILD_IDENTIFIER }})"

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.ref }}
        # We need the last tag before the ref, so we can relabel the version if needed
        fetch-depth: 0

    - name: Add msbuild to PATH
      if: ${{ inputs.platform-tag == 'win_amd64' }}
      uses: microsoft/setup-msbuild@v1.1

    - name: Install C client deps
      if: ${{ inputs.platform-tag == 'win_amd64' }}
      run: nuget restore
      working-directory: aerospike-client-c/vs
      shell: bash

    - name: Set up QEMU for building and testing Linux aarch64 wheels
      if: ${{ endsWith(inputs.platform-tag, 'aarch64') }}
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64

    - name: Setup Docker on macOS x86 for testing
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' && matrix.platforms[0] == 'macosx_x86_64' }}
      uses: ./.github/actions/setup-docker-on-macos

    - uses: ./.github/actions/run-ee-server-and-setup-config-conf
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' }}
      with:
        running-tests-from-docker-container: ${{ startsWith(matrix.platforms[0], 'manylinux') }}

    - name: By default, disable tests (only run basic import test)
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'false' }}
      # Use double quotes to enclose Python code since powershell doesn't seem to allow using single quotes
      # https://stackoverflow.com/questions/34379631/syntaxerror-eol-while-scanning-string-literal
      run: echo "TEST_COMMAND=python -c \"import aerospike\"" >> $GITHUB_ENV
      shell: bash

    - name: Install experimental Python 3.8 arm64 build
      # By default, cibuildwheel installs and uses Python 3.8 x86_64 to cross compile arm64 wheels
      # There is a bug that builds x86_64 wheels instead, so we install this Python 3.8 native ARM build to ensure
      # the wheel is compiled in arm64
      # https://cibuildwheel.pypa.io/en/stable/faq/#macos-building-cpython-38-wheels-on-arm64
      if: ${{ matrix.platforms[0] == 'macosx_arm64' && matrix.python == 'cp38' }}
      run: |
        curl -o /tmp/Python38.pkg https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg
        sudo installer -pkg /tmp/Python38.pkg -target /
        sh "/Applications/Python 3.8/Install Certificates.command"

    - name: Enable integration tests
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' }}
      run: echo "TEST_COMMAND=cd {project}/test/ && pip install -r requirements.txt && python -m pytest new_tests/" >> $GITHUB_ENV
      shell: bash

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.18.1
      env:
        CIBW_ENVIRONMENT_PASS_LINUX: ${{ inputs.apply-no-optimizations && 'UNOPTIMIZED' || '' }}
        CIBW_ENVIRONMENT_MACOS: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        # We are cross compiling for arm64 on x86_64 hardware, so we need to be specific
        CIBW_ARCHS_LINUX: ${{ matrix.platforms[0] == 'manylinux_aarch64' && 'aarch64' || 'auto' }}
        CIBW_BUILD: ${{ env.BUILD_IDENTIFIER }}
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path ./aerospike-client-c/vs/x64/Release -w {dest_dir} {wheel}"
        CIBW_TEST_COMMAND: ${{ env.TEST_COMMAND }}

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        path: ./wheelhouse/*.whl
        name: ${{ env.BUILD_IDENTIFIER }}.build

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ github.sha }}
        status: ${{ job.status }}
        context: "Build wheels (${{ env.BUILD_IDENTIFIER }})"
