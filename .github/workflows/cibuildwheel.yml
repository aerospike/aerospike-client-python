name: 'cibuildwheel'
run-name: 'cibuildwheel (platform-tag=${{ inputs.platform-tag }}, python-tags=${{ inputs.python-tags }}, unoptimized=${{ inputs.unoptimized }}, include-debug-info-for-macos=${{ inputs.include-debug-info-for-macos }}, run_tests=${{ inputs.run_tests }}, use-server-rc=${{ inputs.use-server-rc }}, server-tag=${{ inputs.server-tag }})'

# Build wheels on all (or select) Python versions supported by the Python client for a specific platform

on:
  workflow_dispatch:
    inputs:
      # These are the usual cases for building wheels:
      #
      # 1. One wheel for *one* supported Python version. This is for running specialized tests that only need one Python version
      # like valgrind or QE tests
      # 2. Wheels for *all* supported Python versions for *one* supported platform. This is useful for testing workflow changes for a
      # single OS or CPU architecture, or for bugs that only occur on a single one of those.
      # 3. Wheels for *all* supported Python versions and *all* supported platforms. This is for building wheels for different
      # CI/CD stages (e.g dev, stage, or master)
      #
      # We're able to combine case 1 and 2 into one workflow by creating an input that takes in a JSON list of strings (Python tags)
      # to build wheels for. Actual list inputs aren't supported yet, so it's actually a JSON list encoded as a string.
      #
      # However, it's harder to combine this workflow (case 1 + 2) with case 3.
      # For example, for building wheels on a specific platform (e.g manylinux_x86_64),
      # we need to know the name of the actions runner (e.g ubuntu-22.04) to run the job that builds those wheels
      # So we need a data structure that maps the wheel's platform tag to the runner name:
      # {
      # manylinux_x86_64 -> ubuntu-22.04
      # macosx_x86_64 -> macos-12-large
      # etc...
      # }
      # A map data structure doesn't exist in Github Actions
      # so the plat
      # Originally we were going to have a workflow for each of those 3 cases.
      # But the second workflow would have to forward all of its inputs to the first workflow,
      # so we would have to maintain the same inputs in two places.
      # Instead, combine the first two workflows into one (i.e this workflow) to help with maintainability.
      python-tags:
        type: string
        description: Valid JSON list of Python tags to build the client for
        required: false
        default: '["cp38", "cp39", "cp310", "cp311", "cp312"]'
      map-of-platform-tags-to-runner-names:
        description: "Which platform tags to build (default: all)"
        required: false
        default: '[["manylinux_x86_64", "ubuntu-22.04"], ["manylinux_aarch64", "ubuntu-22.04"], ["macosx_x86_64", "macos-12-large"], ["macosx_arm64", "macos-14"], ["win_amd64", "windows-2022"]]'
      unoptimized:
        description: 'macOS or Linux: Apply -O0 flag?'
        # Windows supports a different flag to disable optimizations, but we haven't added support for it yet
        type: boolean
        required: false
        default: false
      include-debug-info-for-macos:
        description: 'macOS: Build wheels for debugging?'
        type: boolean
        required: false
        default: false
      run_tests:
        description: 'Run Aerospike server and run tests using built wheels?'
        type: boolean
        required: false
        default: false
      use-server-rc:
        type: boolean
        required: true
        default: false
        description: 'Test against server release candidate?'
      server-tag:
        required: true
        default: 'latest'
        description: 'Server docker image tag'

  workflow_call:
    inputs:
      # See workflow call hack in update-version.yml
      is_workflow_call:
        type: boolean
        default: true
        required: false
      python-tags:
        type: string
        required: false
        default: '["cp38", "cp39", "cp310", "cp311", "cp312"]'
      map-of-platform-tags-to-runner-names:
        required: false
        default: '[["manylinux_x86_64", "ubuntu-22.04"], ["manylinux_aarch64", "ubuntu-22.04"], ["macosx_x86_64", "macos-12-large"], ["macosx_arm64", "macos-14"], ["win_amd64", "windows-2022"]]'
        type: string
      # Only used in workflow_call event
      sha-to-build-and-test:
        type: string
        required: true
      # Debug build settings unused by calling workflows, but set here as defaults
      unoptimized:
        type: boolean
        required: false
        default: false
      include-debug-info-for-macos:
        type: boolean
        required: false
        default: false
      run_tests:
        type: boolean
        required: false
        default: false
      use-server-rc:
        required: false
        type: boolean
        default: false
        description: 'Test against server release candidate?'
      server-tag:
        required: false
        type: string
        default: 'latest'
        description: 'Server docker image tag'

env:
  # The workflow_dispatch event doesn't have the sha-to-build-and-test-override input
  # But set-commit-status-action requires a valid github sha
  COMMIT_SHA_TO_BUILD_AND_TEST: ${{ inputs.is_workflow_call == true && inputs.sha-to-build-and-test || github.sha }}


jobs:
  cibuildwheel:
    strategy:
      matrix:
        python-tag: ${{ fromJSON(inputs.python-tags) }}
        # Note that environment variables in Github are all strings
        # Github mac m1 and windows runners don't support Docker / nested virtualization
        # so we need to use self-hosted runners for those platforms
        platform-tag-and-runner-name: ${{ fromJSON(inputs.map-of-platform-tags-to-runner-names) }}
      fail-fast: false
    runs-on: ${{ matrix.platform-tag-and-runner-name[1] }}
    env:
      RUN_INTEGRATION_TESTS_IN_THIS_JOB: ${{ inputs.run_tests && (startsWith(matrix.platform-tag-and-runner-name[0], 'manylinux') || matrix.platform-tag-and-runner-name[0] == 'macosx_x86_64') }}
      BUILD_IDENTIFIER: ${{ matrix.python-tag }}-${{ matrix.platform-tag-and-runner-name[0] }}
      PLATFORM_TAG: ${{ matrix.platform-tag-and-runner-name[0] }}
    steps:
    - name: Create status check message
      run: echo STATUS_CHECK_MESSAGE="cibuildwheel (${{ env.BUILD_IDENTIFIER }})" >> $GITHUB_ENV
      shell: bash

    - name: Show job status for commit
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
        context: ${{ env.STATUS_CHECK_MESSAGE }}

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
        # We need the last tag before the ref, so we can relabel the version if needed
        fetch-depth: 0

    - name: 'macOS arm64: Install experimental Python 3.8 macOS arm64 build'
      # By default, cibuildwheel installs and uses Python 3.8 x86_64 to cross compile macOS arm64 wheels
      # There is a bug that builds macOS x86_64 wheels instead, so we install this Python 3.8 native ARM build to ensure
      # the wheel is compiled for macOS arm64
      # https://cibuildwheel.pypa.io/en/stable/faq/#macos-building-cpython-38-wheels-on-arm64
      if: ${{ matrix.python-tag == 'cp38' && env.PLATFORM_TAG == 'macosx_arm64' }}
      run: |
        curl -o /tmp/Python38.pkg https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg
        sudo installer -pkg /tmp/Python38.pkg -target /
        sh "/Applications/Python 3.8/Install Certificates.command"

    - name: 'Windows: Add msbuild to PATH'
      if: ${{ env.PLATFORM_TAG == 'win_amd64' }}
      uses: microsoft/setup-msbuild@v1.1

    - name: 'Windows: Install C client deps'
      if: ${{ env.PLATFORM_TAG == 'win_amd64' }}
      run: nuget restore
      working-directory: aerospike-client-c/vs

    - name: 'Linux aarch64: Set up QEMU for building and testing wheels'
      if: ${{ startsWith(env.PLATFORM_TAG, 'manylinux') && endsWith(env.PLATFORM_TAG, 'aarch64') }}
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64

    - name: 'macOS x86: Setup Docker using colima for testing'
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' && env.PLATFORM_TAG == 'macosx_x86_64' }}
      uses: ./.github/actions/setup-docker-on-macos

    - name: 'macOS x86: run Aerospike server in Docker container and connect via localhost'
      uses: ./.github/actions/run-ee-server
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' && env.PLATFORM_TAG == 'macosx_x86_64' }}

    - name: "Linux: run Aerospike server in Docker container and configure config.conf to connect to the server container's Docker IP address"
      uses: ./.github/actions/run-ee-server-for-ext-container
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' && startsWith(env.PLATFORM_TAG, 'manylinux') }}

    - name: If not running tests against server, only run basic import test
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'false' }}
      # Use double quotes otherwise Windows will throw this error in cibuildwheel
      # 'import
      #       ^
      # SyntaxError: EOL while scanning string literal
      run: echo "TEST_COMMAND=python -c \"import aerospike\"" >> $GITHUB_ENV
      shell: bash

    - name: Otherwise, enable integration tests
      if: ${{ env.RUN_INTEGRATION_TESTS_IN_THIS_JOB == 'true' }}
      run: echo "TEST_COMMAND=cd {project}/test/ && pip install -r requirements.txt && python -m pytest new_tests/" >> $GITHUB_ENV
      shell: bash

    - name: Set unoptimize flag
      if: ${{ inputs.unoptimized && (startsWith(env.PLATFORM_TAG, 'manylinux') || startsWith(env.PLATFORM_TAG, 'macosx')) }}
      run: echo "UNOPTIMIZED=1" >> $GITHUB_ENV

    - name: Set include dsym flag
      if: ${{ inputs.include-debug-info-for-macos && startsWith(env.PLATFORM_TAG, 'macosx') }}
      run: echo "INCLUDE_DSYM=1" >> $GITHUB_ENV

    - name: Build wheel
      uses: pypa/cibuildwheel@v2.20.0
      env:
        CIBW_ENVIRONMENT_PASS_LINUX: ${{ inputs.unoptimized && 'UNOPTIMIZED' || '' }}
        CIBW_ENVIRONMENT_MACOS: SSL_LIB_PATH="$(brew --prefix openssl@1.1)/lib/" CPATH="$(brew --prefix openssl@1.1)/include/" STATIC_SSL=1
        # We are cross compiling for Linux aarch64 on x86_64 hardware, so we need to specify the target arch
        CIBW_ARCHS_LINUX: ${{ env.PLATFORM_TAG == 'manylinux_aarch64' && 'aarch64' || 'auto' }}
        CIBW_BUILD: ${{ env.BUILD_IDENTIFIER }}
        CIBW_BUILD_FRONTEND: build
        CIBW_BEFORE_ALL_LINUX: >
          yum install openssl-devel -y &&
          yum install python-devel -y &&
          yum install python-setuptools -y
        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path ./aerospike-client-c/vs/x64/Release -w {dest_dir} {wheel}"
        CIBW_TEST_COMMAND: ${{ env.TEST_COMMAND }}

    - name: Upload wheels to GitHub
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        path: ./wheelhouse/*.whl
        name: ${{ env.BUILD_IDENTIFIER }}.build

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@v2.0.0
      if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
      with:
        sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
        status: ${{ job.status }}
        context: ${{ env.STATUS_CHECK_MESSAGE }}

  test-self-hosted:
    needs: cibuildwheel
    if: ${{ inputs.run_tests && (inputs.platform-tag == 'macosx_arm64' || inputs.platform-tag == 'win_amd64') }}
    strategy:
      fail-fast: false
      matrix:
        python-tag: ${{ fromJSON(inputs.python-tags) }}
    runs-on: ${{ inputs.platform-tag == 'macosx_arm64' && fromJSON('["self-hosted", "macOS", "ARM64"]') || fromJSON('["self-hosted", "Windows", "X64"]') }}
    env:
      BUILD_IDENTIFIER: ${{ matrix.python-tag }}-${{ inputs.platform-tag }}
    steps:
      - name: Create status check message
        run: echo STATUS_CHECK_MESSAGE="Test on self hosted (${{ env.BUILD_IDENTIFIER }})" >> $GITHUB_ENV
        shell: bash

      - name: Show job status for commit
        uses: myrotvorets/set-commit-status-action@v2.0.0
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        with:
          sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
          context: ${{ env.STATUS_CHECK_MESSAGE }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}

      # Need to be able to save Docker Hub credentials to keychain
      - if: ${{ inputs.platform-tag == 'macosx_arm64' && inputs.use-server-rc }}
        run: security unlock-keychain -p ${{ secrets.MAC_M1_SELF_HOSTED_RUNNER_PW }}

      - uses: ./.github/actions/run-ee-server

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BUILD_IDENTIFIER }}.build

      - name: Convert Python tag to Python version
        # Don't use sed because we want this command to work on both mac and windows
        # The command used in GNU sed is different than in macOS sed
        run: |
          PYTHON_TAG=${{ matrix.python-tag }}
          PYTHON_VERSION="${PYTHON_TAG/cp/}"
          echo PYTHON_VERSION="${PYTHON_VERSION/3/3.}" >> $GITHUB_ENV
        shell: bash

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install wheel
        run: python3 -m pip install aerospike --force-reinstall --no-index --find-links=./
        shell: bash

      - name: Connect to Docker container on remote machine with Docker daemon
        if: ${{ inputs.platform-tag == 'win_amd64'  }}
        # DOCKER_HOST contains the IP address of the remote machine
        run: |
          $env:DOCKER_HOST_IP = $env:DOCKER_HOST | foreach {$_.replace("tcp://","")} | foreach {$_.replace(":2375", "")}
          crudini --set config.conf enterprise-edition hosts ${env:DOCKER_HOST_IP}:3000
        working-directory: test

      - run: python3 -m pip install pytest -c requirements.txt
        working-directory: test
        shell: bash

      - run: python3 -m pytest new_tests/
        working-directory: test
        shell: bash

      - name: Show job status for commit
        if: ${{ always() && github.event_name != 'push' && github.event_name != 'pull_request' }}
        uses: myrotvorets/set-commit-status-action@v2.0.0
        with:
          sha: ${{ env.COMMIT_SHA_TO_BUILD_AND_TEST }}
          status: ${{ job.status }}
          context: ${{ env.STATUS_CHECK_MESSAGE }}
