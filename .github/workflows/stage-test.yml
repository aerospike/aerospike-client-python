on:
  workflow_call:
    inputs:
      runner-os:
        description: Linux or macOS Github runner to use
        type: string
        required: true
      linux-distro-docker-image-and-tag:
        description: Only use when running a Linux distro test
        type: string
        required: false
      linux-distro-cpu-platform:
        description: Only use when running a Linux distro test
        type: string
        required: false
      test-category:
        description: Category 1 or 2
        type: number
        required: true
      use_jfrog_builds:
        description: If false, download artifacts from Github
        required: true
        type: boolean
        default: true
      jfrog-build-version:
        description: Used only when use_jfrog_builds is true.
        type: string
        required: false
      python-version:
        type: string
        required: true
      # These will be set if use_jfrog_builds is false (i.e when someone is building and testing the artifacts in a workflow dispatch event)
      # If use_jfrog_builds is true, only the defaults will be used
      use-server-rc:
        type: boolean
        required: false
        default: false
        description: 'Test against server release candidate?'
      server-tag:
        type: string
        required: false
        default: 'latest'
        description: 'Server docker image tag'

env:
  LINUX_DISTRO_CONTAINER_NAME: linux-distro

jobs:
  stage-test:
    runs-on: ${{ inputs.runner-os }}
    steps:
      - name: Get tests
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.use_jfrog_builds && inputs.jfrog-build-version || github.sha }}
          sparse-checkout: test

      - name: Set up QEMU for cross compiling arm64
        if: ${{ inputs.linux-distro-cpu-platform == 'linux/arm64' }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - uses: ./.github/actions/run-ee-server
        with:
          use-server-rc: ${{ inputs.use-server-rc }}
          server-tag: ${{ inputs.server-tag }}
          docker-hub-username: ${{ secrets.DOCKER_HUB_BOT_USERNAME }}
          docker-hub-password: ${{ secrets.DOCKER_HUB_BOT_PW }}

      - name: Run distro container
        # Run distro container on host network to access the server Docker container using localhost
        run: docker run --name ${{ env.LINUX_DISTRO_CONTAINER_NAME }} --platform ${{ inputs.linux-distro-cpu-platform }} --network host --detach ${{ inputs.linux-distro-docker-image-and-tag }} tail -f /dev/null

      - name: Copy repo to container
        run: docker cp . ${{ env.LINUX_DISTRO_CONTAINER_NAME }}:/aerospike-client-python

      - name: 'Amazon Linux 2023: install python 3.11 if applicable'
        if: ${{ inputs.linux-distro-docker-image-and-tag == 'amazonlinux:2023' && inputs.python-version == '3.11' }}
        run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} yum install -y python3.11

      - name: 'Ubuntu 22.04 Install python 3.10 that comes by default (step 1)'
        if: ${{ inputs.linux-distro-docker-image-and-tag == 'ubuntu:22.04' }}
        run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} apt update

      - name: 'Ubuntu 22.04 Install python 3.10 that comes by default (step 2)'
        if: ${{ inputs.linux-distro-docker-image-and-tag == 'ubuntu:22.04' }}
        run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} apt install python3 python3-pip -y

      - name: Make sure pip is installed
        if: ${{ inputs.linux-distro-docker-image-and-tag == 'amazonlinux:2023' || inputs.linux-distro-docker-image-and-tag == 'redhat/ubi9' || startsWith(inputs.linux-distro-docker-image-and-tag, 'python') }}
        run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ inputs.python-version }} -m ensurepip

      - name: 'Cat 1: Install build dependencies using yum'
        if: ${{ inputs.test-category == 1 }}
        run: docker exec ${{ env.LINUX_DISTRO_CONTAINER_NAME }} yum install -y openssl-devel glibc-devel autoconf automake libtool zlib-devel openssl-devel python-devel

      - name: 'Cat 1: Install more build dependencies using pip'
        if: ${{ inputs.test-category == 1 }}
        run: docker exec --workdir /aerospike-client-python/ ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ inputs.python-version }} -m pip install -r requirements.txt

      - name: Install distribution
        run: docker exec --workdir /aerospike-client-python/ ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ inputs.python-version }} -m pip install ${{ env.ARTIFACT_FILE_NAME_PATTERN }}

      - name: Install pytest
        run: docker exec --workdir /aerospike-client-python/test ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ inputs.python-version }} -m pip install pytest -c requirements.txt

      - name: Run tests
        run: docker exec --workdir /aerospike-client-python/test ${{ env.LINUX_DISTRO_CONTAINER_NAME }} python${{ inputs.python-version }} -m pytest new_tests/
