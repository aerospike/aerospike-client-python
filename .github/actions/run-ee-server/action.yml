name: 'Run EE Server'
description: 'Run EE server. Returns once server is ready. Only tested on Linux and macOS'
inputs:
  # All inputs in composite actions are strings
  use-server-rc:
    required: true
    default: false
  server-tag:
    required: true
    default: 'latest'
  # Github Composite Actions can't access secrets
  # so we need to pass them in as inputs
  docker-hub-username:
    required: false
  docker-hub-password:
    required: false

runs:
  using: "composite"
  steps:
  - name: Install crudini to manipulate config.conf
    run: pip3 install crudini -c requirements.txt
    working-directory: .github/workflows
    shell: bash

  - name: Create config.conf
    run: cp config.conf.template config.conf
    working-directory: test
    shell: bash

  - name: Use enterprise edition instead of community edition in config.conf
    run: |
      crudini --existing=param --set config.conf enterprise-edition hosts ''
      crudini --existing=param --set config.conf enterprise-edition hosts 127.0.0.1:3000
      crudini --existing=param --set config.conf enterprise-edition user admin
      crudini --existing=param --set config.conf enterprise-edition password admin
    working-directory: test
    shell: bash

  - name: Create config folder to store configs in
    run: mkdir configs
    shell: bash

  # - run: docker build . --build-arg rc=${{ inputs.use-server-rc == 'true' && '-rc' || '' }} --build-arg tag=${{ inputs.server-tag }} --tag ${{ env.SECURITY_IMAGE_TAG }}
  #   working-directory: .github/workflows

  - name: Cache Docker layers
    uses: actions/cache@v4
    with:
      path: /tmp/.buildx-cache
      key: buildx-${{ inputs.use-server-rc }}-${{ inputs.server-tag }}

  - name: Log into Docker Hub to get server RC
    if: ${{ inputs.use-server-rc == 'true' }}
    run: docker login --username ${{ inputs.docker-hub-username }} --password ${{ inputs.docker-hub-password }}
    shell: bash

  - name: Build and push
    uses: docker/build-push-action@v6
    with:
      push: true
      tags: server-ee-${{ inputs.use-server-rc }}:${{ inputs.server-tag }}
      cache-to: type=inline

  - run: docker run -d --name aerospike -p 3000:3000 ${{ env.SECURITY_IMAGE_TAG }}
    shell: bash

  - uses: ./.github/actions/wait-for-as-server-to-start
    id: wait-for-server1
    with:
      container-name: aerospike
      is-security-enabled: false

  # Enabling debug logging for workflow runs doesn't show container logs
  # So we need this step for now
  - if: ${{ !cancelled() && steps.wait-for-server1.outcome == 'failure' }}
    name: Print logs to help debug why the server failed to start up
    run: docker container logs aerospike
    shell: bash

  # - name: Create user in database for tests
  #   # Use default admin user to create another user for testing
  #   run: docker exec aerospike asadm --user admin --password admin --enable -e "manage acl create user superuser password superuser roles read-write-udf sys-admin user-admin data-admin"
  #   shell: bash
