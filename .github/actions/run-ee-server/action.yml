name: 'Run EE Server'
description: 'Run EE server. Returns once server is ready. Only tested on Linux and macOS'
inputs:
  # All inputs in composite actions are strings
  use-server-rc:
    required: true
    default: false
  server-tag:
    required: true
    default: 'latest'
  # Github Composite Actions can't access secrets
  # so we need to pass them in as inputs
  docker-hub-username:
    required: false
  docker-hub-password:
    required: false

runs:
  using: "composite"
  steps:
  - name: Install crudini to manipulate config.conf
    # This will only work on the Github hosted runners.
    # TODO: self hosted runners do not have pipx installed by default
    run: pipx install crudini --pip-args "-c ${{ github.workspace }}/.github/workflows/requirements.txt"
    working-directory: .github/workflows
    shell: bash

  - name: Create config.conf
    run: cp config.conf.template config.conf
    working-directory: test
    shell: bash

  - name: Use enterprise edition instead of community edition in config.conf
    run: |
      crudini --existing=param --set config.conf enterprise-edition hosts ''
      crudini --existing=param --set config.conf enterprise-edition hosts 127.0.0.1:3000
      crudini --existing=param --set config.conf enterprise-edition user superuser
      crudini --existing=param --set config.conf enterprise-edition password superuser
    working-directory: test
    shell: bash

  - name: Create config folder to store configs in
    run: mkdir configs
    shell: bash

  - name: Use release server
    if: ${{ inputs.use-server-rc == 'false' }}
    run: echo "SERVER_IMAGE=aerospike/aerospike-server-enterprise" >> $GITHUB_ENV
    shell: bash

  - name: Use release candidate server
    if: ${{ inputs.use-server-rc == 'true' }}
    run: echo "SERVER_IMAGE=aerospike/aerospike-server-enterprise-rc" >> $GITHUB_ENV
    shell: bash

  - name: Log into Docker Hub to get server RC
    if: ${{ inputs.use-server-rc == 'true' }}
    run: docker login --username ${{ inputs.docker-hub-username }} --password ${{ inputs.docker-hub-password }}
    shell: bash

  - run: docker run -d --name aerospike -p 3000:3000 $SERVER_IMAGE:${{ inputs.server-tag }}
    shell: bash

  - uses: ./.github/actions/wait-for-as-server-to-start
    id: wait-for-server1
    with:
      container-name: aerospike
      is-security-enabled: false

  - name: Get default aerospike.conf from Docker server EE container
    run: |
      docker cp aerospike:/etc/aerospike/aerospike.conf ./configs/aerospike.conf
      docker container stop aerospike
      docker container rm aerospike
    shell: bash

  - name: Enable security features using aerospike.conf
    # Security stanza
    run: echo -e "security {\n\tenable-quotas true\n}\n" >> ./aerospike.conf
    working-directory: ./configs
    shell: bash

  - name: Run enterprise edition server
    run: docker run -tid -v $(pwd)/configs:/opt/aerospike/etc -p 3000:3000 --name aerospike $SERVER_IMAGE:${{ inputs.server-tag }} asd --config-file /opt/aerospike/etc/aerospike.conf
    shell: bash

  - uses: ./.github/actions/wait-for-as-server-to-start
    id: wait-for-server2
    with:
      container-name: aerospike
      is-security-enabled: true

  # Enabling debug logging for workflow runs doesn't show container logs
  # So we need this step for now
  - if: ${{ !cancelled() && (steps.wait-for-server1.outcome == 'failure' || steps.wait-for-server2.outcome == 'failure') }}
    name: Print logs to help debug why the server failed to start up
    run: docker container logs aerospike
    shell: bash

  - name: Create user in database for tests
    # Use default admin user to create another user for testing
    run: docker exec aerospike asadm --user admin --password admin --enable -e "manage acl create user superuser password superuser roles read-write-udf sys-admin user-admin data-admin"
    shell: bash
