name: 'Run EE Server in a Docker container'
description: 'Run EE server. Returns once server is ready. Only tested on Linux and macOS'
# NOTE: do not share this server container with others
# since it's using the default admin / admin credentials
inputs:
  # All inputs in composite actions are strings
  use-server-rc:
    required: true
    description: Deploy server release candidate?
    default: 'false'
  server-tag:
    required: true
    description: Specify Docker tag
    default: 'latest'
  # Github Composite Actions can't access secrets
  # so we need to pass them in as inputs
  docker-hub-username:
    description: Required for using release candidates
    required: false
  docker-hub-password:
    description: Required for using release candidates
    required: false
  where-is-client-connecting-from:
    required: false
    description: 'docker-host, separate-docker-container, "remote-connection" via DOCKER_HOST'
    default: 'docker-host'

runs:
  using: "composite"
  steps:
  # Start up server

  - name: Log into Docker Hub to get server RC
    if: ${{ inputs.use-server-rc == 'true' }}
    run: docker login --username ${{ inputs.docker-hub-username }} --password ${{ inputs.docker-hub-password }}
    shell: bash

  - run: echo IMAGE_NAME=aerospike/aerospike-server-enterprise${{ inputs.use-server-rc == 'true' && '-rc' || '' }}:${{ inputs.server-tag }} >> $GITHUB_ENV
    shell: bash

  - run: echo NEW_IMAGE_NAME=${{ env.IMAGE_NAME }}-python-client-testing >> $GITHUB_ENV
    shell: bash

  # macOS Github runners and Windows self-hosted runners don't have buildx installed by default
  - if: ${{ runner.os == 'Windows' || runner.os == 'macOS' }}
    uses: docker/setup-buildx-action@v3

  - run: echo CA_CERT_FILE_NAME="ca.cer" >> $GITHUB_ENV
    shell: bash

  - run: echo CA_KEY_FILE_NAME="ca.pem" >> $GITHUB_ENV
    shell: bash

  - name: Create a certificate authority
    run: openssl req -x509 -newkey rsa:2048 -keyout ${{ env.CA_KEY_FILE_NAME }} -out ${{ env.CA_CERT_FILE_NAME }} -nodes -subj "/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=null"
    working-directory: .github/workflows/docker-build-context
    shell: bash

  - run: echo TLS_PORT="4333" >> $GITHUB_ENV
    shell: bash

  - name: Build and push
    uses: docker/build-push-action@v6
    with:
      # Don't want to use default Git context or else it will clone the whole Python client repo again
      context: .github/workflows/docker-build-context
      build-args: |
        server_image=${{ env.IMAGE_NAME }}
        CA_KEY_FILE_NAME=${{ env.CA_KEY_FILE_NAME }}
        CA_CERT_FILE_NAME=${{ env.CA_CERT_FILE_NAME }}
        TLS_PORT=${{ env.TLS_PORT }}
      tags: ${{ env.NEW_IMAGE_NAME }}
      # setup-buildx-action configures Docker to use the docker-container build driver
      # This driver doesn't publish an image locally by default
      # so we have to manually enable it
      load: true

  - run: echo SERVER_CONTAINER_NAME="aerospike" >> $GITHUB_ENV
    shell: bash

  - run: docker run -d --name ${{ env.SERVER_CONTAINER_NAME }} -e DEFAULT_TTL=2592000 -p 3000:3000 ${{ env.NEW_IMAGE_NAME }}
    shell: bash

  - uses: ./.github/actions/wait-for-as-server-to-start
    with:
      container-name: ${{ env.SERVER_CONTAINER_NAME }}
      is-security-enabled: true
      is-strong-consistency-enabled: true

  - run: echo SUPERUSER_NAME_AND_PASSWORD="superuser" >> $GITHUB_ENV
    shell: bash

  - run: echo ASADM_AUTH_FLAGS="--user=${{ env.SUPERUSER_NAME_AND_PASSWORD }} --password=${{ env.SUPERUSER_NAME_AND_PASSWORD }}" >> $GITHUB_ENV
    shell: bash

  # All the partitions are assumed to be dead when reusing a roster file
  - run: docker exec ${{ env.SERVER_CONTAINER_NAME }} asadm $ASADM_AUTH_FLAGS --enable --execute "manage revive ns test"
    shell: bash

  # Apply changes
  - run: docker exec ${{ env.SERVER_CONTAINER_NAME }} asadm $ASADM_AUTH_FLAGS --enable --execute "manage recluster"
    shell: bash

  - run: docker exec ${{ env.SERVER_CONTAINER_NAME }} asadm $ASADM_AUTH_FLAGS --tls_enable --tls-cafile /etc/ssl/certs/${{ env.CA_CERT_FILE_NAME }} --port ${{ env.TLS_PORT }} --tls_name docker
    working-directory: .github/workflows/docker-build-context
    shell: bash

  # For debugging
  - run: docker logs ${{ env.SERVER_CONTAINER_NAME }}
    shell: bash

  # Configure tests

  - name: Install crudini to manipulate config.conf
    run: pipx install crudini --pip-args "-c ${{ github.workspace }}/.github/workflows/requirements.txt"
    working-directory: .github/workflows
    shell: bash

  - name: Create config.conf
    run: cp config.conf.template config.conf
    working-directory: test
    shell: bash

  - name: Disable enterprise edition connection
    run: crudini --existing=param --set config.conf community-edition hosts ''
    working-directory: test
    shell: bash

  - name: Set credentials in config file
    run: |
      crudini --existing=param --set config.conf enterprise-edition user ${{ env.SUPERUSER_NAME_AND_PASSWORD }}
      crudini --existing=param --set config.conf enterprise-edition password ${{ env.SUPERUSER_NAME_AND_PASSWORD }}
      crudini --set config.conf tls enable true
      crudini --set config.conf tls cafile ../.github/workflows/docker-build-context/${{ env.CA_CERT_FILE_NAME }}
    working-directory: test
    shell: bash

  - name: Set IP address to localhost
    if: ${{ inputs.where-is-client-connecting-from == 'docker-host' }}
    run: echo SERVER_IP=127.0.0.1 >> $GITHUB_ENV
    working-directory: test
    shell: bash

  - name: Set IP address to remote machine running the Docker daemon
    if: ${{ inputs.where-is-client-connecting-from == 'remote-connection' }}
    run: |
      SERVER_IP=${DOCKER_HOST/tcp:\/\//}
      echo SERVER_IP=${SERVER_IP/:2375/} >> $GITHUB_ENV
    working-directory: test
    shell: bash

  - name: Set IP address to Docker container for the server
    if: ${{ inputs.where-is-client-connecting-from == 'separate-docker-container' }}
    run: echo SERVER_IP=$(docker container inspect -f '{{ .NetworkSettings.IPAddress }}' ${{ env.SERVER_CONTAINER_NAME }}) >> $GITHUB_ENV
    shell: bash

  - name: Invalid input
    if: ${{ env.SERVER_IP == '' }}
    run: exit 1
    shell: bash

  - name: Get cluster name
    run: echo CLUSTER_NAME=$(docker exec ${{ env.SERVER_CONTAINER_NAME }} asinfo -v "get-config:context=service" -l | grep -i cluster-name | cut -d = -f 2) >> $GITHUB_ENV
    shell: bash

  - name: Set EE server's IP address
    run: crudini --existing=param --set config.conf enterprise-edition hosts ${{ env.SERVER_IP }}:${{ env.TLS_PORT }}|${{ env.CLUSTER_NAME }}
    working-directory: test
    shell: bash
